@model List<Portal.Models.PersonalityModel>

<!--таблица пользователей-->
<div class="panel panel-default"  id="personTable" style="margin-bottom:0px">
    <div class="panel-body">
        <div class="row mb-4 mt-3">
            <div class="col-12">
                <div class="card">
                    <div class="card-body">
                        @try
                        {
                        <table class="data-table nowrap" id="tableDataPerson" > 
                            <thead>
                                <tr>
                                    <th>Фамилия</th>
                                    <th>Имя</th>
                                    <th>Отчество</th>
                                    <th>Дата рождения</th>
                                    <th>Должность</th>
                                    <th>Место работы</th>
                                    <th class="hidden">Дата приема на работу</th>
                                    <th class="hidden">Дата увольнения</th>
                                    <th>Смена</th>
                                    <th>ЮЛ</th>
                                    <th>ЮЛ разнесения затрат</th>
                                    <th class='hidden'>Активность</th>
                                    <th align='center'>Статус</th>
                                </tr>
                            </thead>
                            <tbody id="tablePerson">
                                @for(var x=0; x < Model.Count;x++)
                                {
                                            <tr id="@Model[x].Personalities.Guid" class="activeRow">
                                                <td class="tdPersonTable">
                                                    <p class="list-item-heading">@Model[x].PersonalitiesVersions.Surname</p>
                                                </td>
                                                <td class="tdPersonTable">
                                                    <p class="userName text-muted">@Model[x].PersonalitiesVersions.Name</p>
                                                </td>
                                                <td class="tdPersonTable">
                                                    <p class="text-muted">@Model[x].PersonalitiesVersions.Patronymic</p>
                                                </td>
                                                <td class="tdPersonTable">
                                                    <p class="text-muted">@Model[x].Personalities.BirthDate.ToString("dd.MM.yyyy")</p>
                                                </td>
                                                <td class="tdPersonTable">
                                                    <p class="text-muted">@Model[x].PersonalitiesVersions.JobTitle.Name</p>
                                                </td>
                                                <td class="tdPersonTable">
                                                    <p class="text-muted">@Model[x].PersonalitiesVersions.Location.Name</p>
                                                </td>
                                                <td class="tdPersonTable hidden">
                                                    <p class="text-muted">@Model[x].PersonalitiesVersions.HireDate.ToString("dd.MM.yyyy")</p>
                                                </td>
                                                <td class="tdPersonTable hidden">
                                                    <p class="text-muted">@Model[x].PersonalitiesVersions.DismissalsDate</p>
                                                </td>
                                                <td class="tdPersonTable">
                                                    <p class="text-muted">@Model[x].PersonalitiesVersions.Schedule.Name</p>
                                                </td>
                                                <td class="tdPersonTable">
                                                    <p class="text-muted">@Model[x].PersonalitiesVersions.Entity?.Name</p>
                                                </td>
                                                <td class="tdPersonTable">
                                                    <p class="text-muted">@Model[x].Entity.FirstOrDefault(y => y.Guid == Model[x].PersonalitiesVersions.EntityCostGuid).Name</p>
                                                </td>
                                                <td class="tdPersonTable hidden">
                                                    <p class="text-muted">@Model[x].PersonalitiesVersions.Actual</p>
                                                </td>
                                                
                                                @if (Model[x].StatusError[0] == 0)
                                                {
                                                    <td class="tdPersonTable vertical-flex" style='padding-left: 24px !important;'>
                                                        <p class='green_p'></p>
                                                    </td>
                                                }
                                                @if (Model[x].StatusError[0] == 1)
                                                {
                                                    <td class="tdPersonTable vertical-flex" align='center' style='padding-left: 24px !important;'>
                                                        <p class='red_p'></p>
                                                    </td>
                                                }
                                            </tr>
                                       

                                }
                            </tbody>
                        </table>
                        }
                        catch {
                            <div> Данных нет :( </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@*Добавление блока с пагинацией*@
<ul id="logPages" class="pagination shadowed classForStyles">
    <li id="leftPages" class="ignore"><a style="cursor:pointer"><span><i class="fa fa-angle-left"></i></span></a></li>
    @*Вычисление кол-ва страниц и выбор активной*@
    @{
        var numPages = 1;
        var totalPages = 1;
        var lastPage = 1;
        var firstPage = 1;
        if(Model.Count() != 0)
        {
            numPages = 6;
            totalPages = Model[0].maxPage;
            firstPage = 1;



            while (firstPage <= Model[0].currentPage) firstPage += numPages;
            if (firstPage != 1) firstPage -= numPages;

            lastPage = firstPage + numPages - 1;
            var id = "";
            var o = 1;

            for (var p = firstPage; p <= lastPage; p++)
            {
                if (p <= totalPages)
                {
                    id = "page_" + o.ToString();
                    var active = "";
                    if (p == Model[0].currentPage) active = "class = active";

                                <li @active style="cursor:pointer"><a id="@id">@p</a></li>

                    o++;
                }
            }
        }
    }
    <li id="rightPages" class="ignore"><a style="cursor:pointer"><span><i class="fa fa-angle-right"></i></span></a></li>
</ul>


<script>
    var selectedPage = "@Model[0].currentPage";
    var numPages = @Html.Raw(Json.Serialize(numPages));
    var totalPages = "@Model[0].maxPage";
    var firstPage = @Html.Raw(Json.Serialize(firstPage));
    var lastPage = @Html.Raw(Json.Serialize(lastPage));

    // Получение номера станрницы на которую тыкнули
    $('#logPages').children('li').children('a').click(function () {
        if (!$(this).parent('li').hasClass('ignore')) {
            if (!$(this).parent('li').hasClass('active')) {
                selectedPage = $(this).text();
                $('#logPages').children('li').removeClass('active');
                $(this).parent('li').addClass('active');
                let a = $(this).parent('li')
                GetData(selectedPage);
            }
        }
    });

    // перемотка номеров вправо
    $('#rightPages').click(function () {
        if (lastPage < totalPages) {
            let i = 1;
            while (i <= numPages) {
                var pageNumber = lastPage + i;
                var id = "#page_" + i;
                
                $(id).text(pageNumber);

                if (pageNumber > totalPages) $(id).hide();
                else {
                    $(id).show();
                    $('#logPages').children('li').removeClass('active');
                    if (pageNumber == selectedPage + numPages) $(id).click();
                }
                i++;
            }
            firstPage = firstPage + numPages;
            lastPage = lastPage + numPages;
        }
    });

    // перемотка номеров влево
    $('#leftPages').click(function () {

        if (firstPage > 1) {
            let i = numPages;
            while (i >= 1) {
                var pageNumber = firstPage - i;
                var id = "#page_" + i;
                $(id).text(pageNumber);
                if (pageNumber < 1) $(id).hide();
                else {
                    $(id).show();
                    $('#logPages').children('li').removeClass('active');
                    if (pageNumber == selectedPage - numPages) $(id).click();
                }
                i--;
            }
            firstPage = firstPage + numPages;
            lastPage = lastPage + numPages;
            $(`#page_1`).click();
        }
    });

    
</script>


<script>
    // Получаем данные для выбранной страницы
    function GetData(page) {
        const searchItem = $("#searchDatatable").val();
        let closedPersonality = document.getElementById('closedPersonality').checked;
        SpinnerShow();
        if (closedPersonality) {
            $('#page').load(`/Personality/PersonalityTable?showUnActual=1&page=${page}&searchItem=${searchItem}`, function () { SpinnerHide(); });
        } else {
            $('#page').load(`/Personality/PersonalityTable?showUnActual=0&page=${page}&searchItem=${searchItem}`, function () { SpinnerHide(); });
        }
    }

</script>

<!--вычисление высоты таблицы-->
<script>
    var height = $('#global').height();

    height -= $('#cm-header').height();
    height -= $('#headMenu').height() + 76;

</script>

<!--инициализация таблицы-->
<script>
    // Функция откладки поиска сотрудника в таблице
    function debounce(func, delay) {
        let timer;
        return function () {
            const context = this;
            const args = arguments;
            clearTimeout(timer);
            timer = setTimeout(() => {
                func.apply(context, args);
            }, delay);
        };
    }

    var table = $(".data-table").DataTable({
        "ordering": true,
        "order": [0, 'asc'],
        searching: true,
        bLengthChange: false,
        destroy: true,
        info: false,
        paging: false,
        sDom: '<"row view-filter"<"col-sm-12"<"float-left"l><"float-right"f><"clearfix">>>t<"row view-pager"<"col-sm-12"<"text-center"ip>>>',
        responsive: !0,
        deferRender: !0,
        scrollY: height,
        scrollCollapse: !0
    });

    // сортируем по-умолчанию по первому столбцу
    table.order([0, 'asc']).draw();

    // поиск по таблице
    $("#searchDatatable").on("input", debounce(function (event) {
        const searchItem = $(this).val();
        SpinnerShow();
        // Запрос к серверу
        $.ajax({
            url: `/Personality/PersonalityTable?showUnActual=1&page=1&searchItem=${searchItem}`,
            method: "GET",
            success: function (data) {
                // Обновление таблицы
                $('#page').html(data);
                SpinnerHide();
            },
            error: function (error) {
                document.getElementById("tablePerson").innerHTML = `<tr class="odd"><td valign="top" colspan="9" class="dataTables_empty">Совпадений не найдено</td></tr>`;
            }
        });
    }, 900));

    // скрываем сверху таблицы фильтры data-table
    $('.view-filter').hide();

</script>

<!--клик по строке-->
<script>
    $('.activeRow').click(function () {
        var itemId = this.id;
        var itemName = $(this).find('.userName').text();
        PersonalityVersions(itemId, 0);
    });
    $('#buttonAdd').unbind('click');
    $('#buttonAdd').click(function () {
        AddItem(0, 1)
    })
</script>

@* Выделение ряда неактивного пользователя *@
<script>
    const table = document.getElementById("tablePerson"); //Находим таблицу
    const rows = table.getElementsByTagName("tr"); //Получаем массив рядов
    for(let i = 0; i < rows.length; i++) { //Проходимся по каждому ряду
        let cell = rows[i].getElementsByTagName('td') //Получаем список ячеек
        // Проходимся по каждой ячейки в поисках "0" или "2"
        for(let j = 0; j < cell.length; j++){ 
            let td = cell[j].querySelector("p").textContent
            if(td === '0' || td === '2') {
                //Закрашиваем ряд
                rows[i].style.backgroundColor = "#f3c7a030";
            }
        }
    }

    $('#back').unbind('click');
    $('#back').click(function () { location.hash = "#staff" });
</script>



