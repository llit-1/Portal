@model PersonalityEditModel

<!--Блок добавления\редактирования работника-->
<div class="panel panel-default panel-default-person modalPersonWidth"  id="personTable" style="margin-bottom:0px">
    <div class="titlePersontable">

        @*Изменение хедера на странице*@
        @if(Model.NewPerson == "1")
        {
            <h3>Данные пользователя</h3>
        }
        else
        {
            <h3>Данные версии пользователя</h3>
        }

        @if(@Model.NewPerson != null)
        {
            <input class="hidden" id="NewPerson" value="@Model.NewPerson"/>
        }
        
        <!--Выпадающий список состояний работника-->
        @if (Model?.PersonalitiesVersions == null || Model.PersonalitiesVersions?.Actual == 1)
        {
            <select class=" actual" id='actual'>
                <option value="1" selected='selected' class="optionForColor">Активен</option>
                <option value="2" class="optionForColor">Отстранен</option>
                <option value="0" class="optionForColor">Уволен</option>
            </select>
        }
        else if (Model.PersonalitiesVersions?.Actual == 2)
        {
            <select class=" actual" id='actual' >
                <option value="1" class="optionForColor">Активен</option>
                <option value="2" selected='selected' class="optionForColor">Отстранен</option>
                <option value="0" class="optionForColor">Уволен</option>
            </select>
        }
        else
        {
            <select class=" actual" id='actual' >
                <option value="1" class="optionForColor">Активен</option>
                <option value="2" class="optionForColor">Отстранен</option>
                <option value="0" selected='selected' class="optionForColor">Уволен</option>
            </select>
        }
    </div>

    <hr>

    <!--Наполнение данных, если они есть-->
    <div class="personData">
        <!--Первый столбец-->
        @if(Model.PersonalitiesVersions?.Personalities != null)
        {
            <form id="user-form">
                <div class="leftBlockPersonData">
                    @* Добавление и заполнение данных *@
                    <label class="label-light">Фамилия</label>
                    <input required type="text" class="inputPersonData" placeholder="Введите фамилию" id="surnamePerson" value="@Model.PersonalitiesVersions.Surname">
                    <label class="label-light">Имя</label>
                    <input required type="text" class="inputPersonData" placeholder="Введите имя" id="namePerson" value="@Model.PersonalitiesVersions.Name">
                    <label class="label-light">Отчество</label>
                    <input type="text" class="inputPersonData" placeholder="Введите отчество" id="patronymicPerson" value="@Model.PersonalitiesVersions.Patronymic">
                    <label class="label-light">Дата рождения</label>
                    <input required type="date" min="1900-01-01" max="2010-01-01" class="inputPersonData" id="birthDatePerson" value="@Model.PersonalitiesVersions.Personalities.BirthDate.ToString("yyyy-MM-dd")">
                    <label class="label-light">Должность</label>
                    <input type="hidden" id="personGUID" value="@Model.PersonalitiesVersions.Personalities.Guid">
                    <input type="hidden" id="personVersionGUID" value="@Model.PersonalitiesVersions.Guid">

                    @* Выбор должности *@
                    <div style="width:100%; float:left; max-height:500px; overflow-y:auto">
                        <select required id="jobTitlePerson" class="inputPersonData" data-width="100%" value="@Model.PersonalitiesVersions.JobTitle.Name">
                            @if (Model.JobTitles.FirstOrDefault(g => g.Guid == Model.PersonalitiesVersions.JobTitle.Guid) != null)
                            {
                                <option value="@Model.PersonalitiesVersions.JobTitle.Guid" selected>@Model.PersonalitiesVersions.JobTitle.Name</option>
                            }
                            @foreach (var jobTitle in Model.JobTitles.OrderBy(g => g.Name))
                            {
                                <option value="@jobTitle.Guid">@jobTitle.Name</option>
                            }
                        </select>
                    </div>

                    <label class="label-light">ИНН</label>
                    <input type="text" class="inputPersonData" placeholder="Введите ИНН" id="INNPerson" value="@Model.PersonalitiesVersions.Personalities?.INN">

                </div>
                
                <div class="rightBlockPersonData">
                    <label class="label-light">ТТ</label>
                    @* Выбор ТТ *@
                    <div style="width:100%; float:left; max-height:500px; overflow-y:auto">
                        <select required id="TTPerson" class="inputPersonData" data-width="100%" value="@Model.PersonalitiesVersions.Location.Name" placeholder="Выберите ТТ">

                        <option value="@Model.PersonalitiesVersions.Location.Guid">@Model.PersonalitiesVersions.Location.Name</option>

                            @foreach (var location in Model.Locations.OrderBy(g => g.Name))
                            {
                                    <option value="@location.Guid">@location.Name</option>
                            }
                        </select>
                    </div>

                    <label class="label-light">Дата приема на работу</label>
                    <input required type="date" class="inputPersonData" id="HireDate" min="1900-01-01" value="@Model.PersonalitiesVersions.HireDate.ToString("yyyy-MM-dd")">
                    <label class="label-light">Дата увольнения</label>
                    <input type="date" class="inputPersonData dissDate" min="@Model.PersonalitiesVersions.HireDate.ToString("yyyy-MM-dd")" id="DismissalsDate" value="@Model.PersonalitiesVersions.DismissalsDate?.ToString("yyyy-MM-dd")">

                    <label class="label-light">Время смены</label>
                    @* Выбор смены *@
                    <div style="width:100%; float:left; max-height:500px; overflow-y:auto">
                        <select required id="ScheduleGUID" class="inputPersonData" data-width="100%" value="@Model.PersonalitiesVersions.Schedule.Name">
                            @foreach (var schedule in Model.Schedules.OrderBy(g => g.Name))
                            {
                                if (schedule.BeginTime == Model.PersonalitiesVersions.Schedule.BeginTime && schedule.EndTime == Model.PersonalitiesVersions.Schedule.EndTime && schedule.Name == Model.PersonalitiesVersions.Schedule.Name)
                                {
                                    <option selected="selected" value="@schedule.Guid">@schedule.BeginTime - @schedule.EndTime</option>
                                }
                                else
                                {
                                    if (Model.PersonalitiesVersions.Schedule.Name == schedule.Name)
                                    {
                                        <option value="@schedule.Guid">@schedule.BeginTime - @schedule.EndTime</option>
                                    }
                                }
                            }
                        </select>
                    </div>

                    @* Выбор Юр. лица *@
                    <label class="label-light">Юр. лицо</label>
                    <div style="width:100%; float:left; max-height:500px; overflow-y:auto">
                        <select required id="EntityGUID" class="inputPersonData" data-width="100%" value="@Model.PersonalitiesVersions.Entity?.Name">
                            @if (Model.Entity.FirstOrDefault(g => g.Guid == Model.PersonalitiesVersions.Entity?.Guid) != null)
                            {
                                <option selected="selected" disabled value="@Model.PersonalitiesVersions.Entity.Guid">@Model.PersonalitiesVersions.Entity.Name</option>
                            }
                            @foreach (var entity in Model.Entity.OrderBy(g => g.Name))
                            {
                                <option value="@entity.Guid">@entity.Name</option>
                            }
                        </select>
                    </div>

                    <label class="label-light">СНИЛС</label>
                    <input type="text" class="inputPersonData" placeholder="Введите СНИЛС" id="SNILSPerson" value="@Model.PersonalitiesVersions.Personalities?.SNILS">


                </div>

                <div class='rightBlockPersonData'>
                    @* Выбор Юр. лица разнесения затрат *@
                    <label class="label-light">Юр. лицо разнесения затрат</label>
                    <div style="width:100%; float:left; max-height:500px; overflow-y:auto">
                        <select required id="EntityCostGUID" class="inputPersonData" data-width="100%">
                            @if (Model.Entity.FirstOrDefault(g => g.Guid == Model.PersonalitiesVersions.EntityCostGuid) != null)
                            {
                                <option selected="selected" disabled value="@Model.PersonalitiesVersions.EntityCostGuid">@Model.Entity.FirstOrDefault(x => x.Guid == Model.PersonalitiesVersions.EntityCostGuid).Name</option>
                            }
                            @foreach (var entity in Model.Entity.OrderBy(g => g.Name))
                            {
                                <option value="@entity.Guid">@entity.Name</option>
                            }
                        </select>
                    </div>

                    @if(Model.NewPerson == "1")
                    {
                        <label class="label-light hidden">Период действия версии</label>
                        <div class='rightBlockPersonData__versions hidden'>
                            <label class="label-light">С</label>
                            <div>
                                <input disable type="date" class="inputPersonData correctForData" id="VersionStartDate" value="@Model.PersonalitiesVersions.VersionStartDate?.ToString("yyyy-MM-dd")">
                            </div>
                            <label class="label-light">По</label>
                            <div>
                                <input disable type="date" class="inputPersonData correctForData" id="VersionEndDate" value="@Model.PersonalitiesVersions.VersionEndDate?.ToString("yyyy-MM-dd")">
                            </div>
                        </div>
                    }
                    else if(Model.NewPerson == "2")
                    {
                        <label class="label-light">Период действия версии</label>
                        <input class='hidden' value='@Model.NewPerson' id='check_person'>
                        <div class='rightBlockPersonData__versions'>
                            <label class="label-light">С</label>
                            <div>
                                <input required type="date" class="inputPersonData correctForData" id="VersionStartDate" min="@Model.PersonalitiesVersions.HireDate.ToString("yyyy-MM-dd")" max="@Model.PersonalitiesVersions.VersionEndDate?.ToString("yyyy-MM-dd")" value="@Model.PersonalitiesVersions.VersionStartDate?.ToString("yyyy-MM-dd")">
                            </div>
                            <label class="label-light">По</label>
                            <div>
                                <input type="date" class="inputPersonData correctForData" id="VersionEndDate" min="@Model.PersonalitiesVersions.VersionStartDate?.ToString("yyyy-MM-dd")" value="@Model.PersonalitiesVersions.VersionEndDate?.ToString("yyyy-MM-dd")">
                            </div>
                        </div>
                    }
                    else
                    {
                        <label class="label-light">Период действия версии</label>
                        <input class='hidden' value='@Model.NewPerson' id='check_person'>
                        <div class='rightBlockPersonData__versions'>
                            <label class="label-light">С</label>
                            <div>
                                <input required type="date" class="inputPersonData correctForData" min="@Model.PersonalitiesVersions.HireDate.ToString("yyyy-MM-dd")" id="VersionStartDate" value="@DateTime.Now.ToString("yyyy-MM-dd")">
                            </div>
                            <label class="label-light">По</label>
                            <div>
                                <input type="date" class="inputPersonData correctForData" id="VersionEndDate" min="@DateTime.Now.ToString("yyyy-MM-dd")">
                            </div>
                        </div>
                    }

                    @{
                        <label class="label-light" style="padding-top: 12px">Номер телефона</label>
                        <input type="text" class="inputPersonData" placeholder="Введите номер телефона" id="tel" value="@Model?.PersonalitiesVersions?.Personalities?.Phone">
                    }
                    

                    @if (Model.NewPerson == "1")
                    {
                        <div class="buttonAddPerson">
                            <button class="buttonAddPersonData" type="submit">ДОБАВИТЬ</button>
                            <button class="buttonAddPersonData buttonClearPersonData" onclick="clearInputs()">ОЧИСТИТЬ</button>
                        </div>
                    }
                    else
                    {
                        <div class="buttonAddPerson">
                            <button class="buttonAddPersonData" type="submit">СОХРАНИТЬ</button>
                            <button class="buttonAddPersonData buttonClearPersonData" onclick="clearInputs()">ОЧИСТИТЬ</button>
                        </div>
                    }
                    
                </div>
            </form>
        }
        else
        {
            <form id="user-form">
                <div class="leftBlockPersonData">
                    <label class="label-light">Фамилия</label>
                    <input required type="text" class="inputPersonData" placeholder="Введите фамилию" id="surnamePerson">
                    <label class="label-light">Имя</label>
                    <input required type="text" class="inputPersonData" placeholder="Введите имя" id="namePerson">               
                    <label class="label-light">Отчество</label>
                    <input type="text" class="inputPersonData" placeholder="Введите отчество" id="patronymicPerson" >
                    <label class="label-light">Дата рождения</label>
                    <input required type="date" class="inputPersonData" id="birthDatePerson" min="1900-01-01" max="2010-01-01">
                    <label class="label-light">Должность</label>
                    <input required type="hidden" id="personGUID" value="0">

                    @* Выбор должности *@
                    <div style="width:100%; float:left; max-height:500px; overflow-y:auto">
                        <select placeholder="Выберите должность" required id="jobTitlePerson" class="inputPersonData" data-width="100%">
                            @foreach (var jobTitle in Model.JobTitles.OrderBy(g => g.Name))
                            {
                                if (Model.JobTitles.FirstOrDefault(g => g.Guid == jobTitle.Guid) != null)
                                {
                                    <option value="@jobTitle.Guid">@jobTitle.Name</option>
                                }
                                else
                                {
                                    <option value="@jobTitle.Guid">@jobTitle.Name</option>
                                }
                                    

                            }
                        </select>
                    </div>

                    <label class="label-light">ИНН</label>
                    <input type="text" class="inputPersonData" placeholder="Введите ИНН" id="INNPerson" value="">
                </div>
                
                <div class="rightBlockPersonData">
                    <label class="label-light">ТТ</label>
                    @* Выбор ТТ *@
                    <div style="width:100%; float:left; max-height:500px; overflow-y:auto">
                        <select placeholder="Выберите ТТ" required id="TTPerson" class="inputPersonData" data-width="100%">
                            @foreach (var location in Model.Locations.OrderBy(g => g.Name))
                            {
                                if (Model.Locations.FirstOrDefault(g => g.Guid == location.Guid) != null)
                                {
                                    <option selected="selected" value="@location.Guid">@location.Name</option>
                                }
                                else
                                {
                                    <option value="@location.Guid">@location.Name</option>
                                }
                            }
                        </select>
                    </div>

                    <label class="label-light">Дата приема на работу</label>
                    <input required type="date" class="inputPersonData" id="HireDate">
                    <label class="label-light">Дата увольнения</label>
                    <input type="date" class="inputPersonData dissDate" id="DismissalsDate">
                    <label class="label-light">Время смены</label>
                    @* Выбор смены *@
                    <div style="width:100%; float:left; max-height:500px; overflow-y:auto">
                        <select placeholder="Выберите смену" required id="ScheduleGUID" class="inputPersonData" data-width="100%">
                            @foreach (var schedule in Model.Schedules.OrderBy(g => g.Name))
                            {
                                if (Model.Schedules.FirstOrDefault(g => g.Guid == schedule.Guid) != null)
                                {
                                    <option selected="selected" value="@schedule.Guid">@schedule.BeginTime - @schedule.EndTime</option>
                                }
                                else
                                {
                                    <option value="@schedule.Guid">@schedule.Name</option>
                                }
                            }
                        </select>
                    </div>

                    <label class="label-light">Юр. лицо</label>
                    <div style="width:100%; float:left; max-height:500px; overflow-y:auto">
                        <select required id="EntityGUID" class="inputPersonData" data-width="100%">
                            @foreach (var entity in Model.Entity.OrderBy(g => g.Name))
                            {
                                <option selected="selected" value="@entity.Guid">@entity.Name</option>
                            }
                        </select>
                    </div>

                    <label class="label-light">СНИЛС</label>
                    <input type="text" class="inputPersonData" placeholder="Введите СНИЛС" id="SNILSPerson" value="">
                </div>

                <div class='rightBlockPersonData'>
                    @* Выбор Юр. лица *@
                    <label class="label-light">Юр. лицо разнесения затрат</label>
                    <div style="width:100%; float:left; max-height:500px; overflow-y:auto">
                        <select required id="EntityCostGUID" class="inputPersonData" data-width="100%">
                            @foreach (var entity in Model.Entity.OrderBy(g => g.Name))
                            {
                                    <option selected="selected" value="@entity.Guid">@entity.Name</option>
                            }
                        </select>
                    </div>
                    @if(Model.NewPerson == "1")
                    {
                    <label class="label-light hidden">Период действия версии</label>
                    <div class='rightBlockPersonData__versions hidden'>
                        <label class="label-light">С</label>
                        <div>
                            <input disable type="date" class="inputPersonData correctForData" id="VersionStartDate">
                        </div>
                        <label class="label-light">По</label>
                        <div>
                            <input disable type="date" class="inputPersonData correctForData" id="VersionEndDate">
                        </div>
                    </div>
                    }
                    else
                    {
                    <label class="label-light">Период действия версии</label>
                    <div class='rightBlockPersonData__versions'>
                        <label class="label-light">С</label>
                        <div>
                            <input required type="date" class="inputPersonData correctForData" id="VersionStartDate">
                        </div>
                        <label class="label-light">По</label>
                        <div>
                            <input required type="date" class="inputPersonData correctForData" id="VersionEndDate">
                        </div>
                    </div>   
                    }

                    <label class="label-light">Номер телефона</label>
                    <input type="text" class="inputPersonData" placeholder="Введите номер телефона" id="tel" value="">

                    <div class="buttonAddPerson ">
                        <button class="buttonAddPersonData" type="submit">ДОБАВИТЬ</button>
                        <button class="buttonAddPersonData buttonClearPersonData" onclick="clearInputs()">ОЧИСТИТЬ</button>
                    </div>
                </div>
            </form>
        }
    </div>
</div>


<script>
    // Смена состояния сотрудника в зависимости от заполненности даты увольнения
    // const actualPicker = document.querySelector('.actual');
    // const valueDismissalsDate = document.querySelector('.dissDate');

    // if (valueDismissalsDate.value) {
    //     document.getElementById('VersionStartDate').value = valueDismissalsDate.value;
    //     document.getElementById('VersionStartDate').disabled = true;
    // } else {
    //     document.getElementById('VersionStartDate').disabled = false;
    // }

    // valueDismissalsDate.addEventListener('input', () => {
    //     @* Изменение статуса сотрудника при изменении даты увольнения *@
    //     if(valueDismissalsDate.value != '') {
    //         actualPicker.innerHTML = "<option value='1'>Активен</option><option value='2' >Отстранен</option><option value='0' selected>Уволен</option>";       
    //     } else {
    //         actualPicker.innerHTML = "<option value='1' selected>Активен</option><option value='2' >Отстранен</option><option value='0' >Уволен</option>";
    //     }
    //     @* Изменение даты начала версии при изменении даты увольнения *@
    //     if (valueDismissalsDate.value) {
    //         document.getElementById('VersionStartDate').value = valueDismissalsDate.value;
    //         document.getElementById('VersionStartDate').disabled = true;
    //     } else {
    //         document.getElementById('VersionStartDate').disabled = false;
    //     }
        
    // })

    // Возврат к таблице
    const NewPerson = document.getElementById('NewPerson').value; // 1 - новый сотрудник, 0 и 2 - не новый
    const personGUID = document.getElementById('personGUID').value;
    if(NewPerson == 1)
    {
        $('#back').unbind('click');
        $('#back').click(function () { location.hash = "#Personality" });
    } else {
        $('#back').unbind('click');
        $('#back').click(function () { PersonalityVersions(personGUID, 2) });
    }

    function clearInputs() {
        // Получаем все элементы input на странице и очищаем их значение
        document.querySelectorAll(".inputPersonData").forEach(input => input.value = "");
    }

    // Валидация формы + отправка
    document.getElementById("user-form").addEventListener("submit", function(event) {
        event.preventDefault();
        if (this.checkValidity()) {
            if(location.hash == '#EditPerson'){
                editUser();
            }
            else {
                addUser();
            }
        }
    })
</script>

<script>
    const name = document.getElementById('namePerson');
    const surname = document.getElementById('surnamePerson');
    if(name.value == '' && surname.value == '') {
        clearInputs();
    }
</script>

<script>
    // CSS стили модального окна
    const modalStyle = `
            position: fixed;
            z-index: 100;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.4);
            display: none;
        `;

    // Создаем div элемент для модального окна
    const modalDiv = document.createElement('div');
    modalDiv.style = modalStyle;
    modalDiv.classList.add('closeModal')
    document.body.appendChild(modalDiv);

    // CSS стили контента модального окна
    const modalContentStyle = `
            background-color: #fefefe;
            margin: 10% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 80%;
            max-width: 600px;
        `;

    // Создаем div элемент для контента модального окна
    const modalContentDiv = document.createElement('div');
    modalContentDiv.style = modalContentStyle;
    modalDiv.appendChild(modalContentDiv);

    // Создаем кнопку закрытия модального окна
    const closeBtn = document.createElement('span');
    closeBtn.textContent = '×';
    closeBtn.style = `
            float: right;
            font-size: 24px;
            font-weight: bold;
            cursor: pointer;
        `;

    // Добавляем обработчик события для закрытия модального окна
    closeBtn.addEventListener('click', () => {
        modalDiv.style.display = 'none';
    });

    // Создаем заголовок модального окна
    const modalHeader = document.createElement('h2');
    modalHeader.style = `
            border-bottom: 1px solid #e5e5e5;
            padding-bottom: 10px
        ;`;
    modalContentDiv.appendChild(closeBtn);
    modalContentDiv.appendChild(modalHeader);

    // Создаем тело модального окна
    const modalBody = document.createElement('div');
    modalBody.style = `
            padding-top: 15px;
        `;
    modalContentDiv.appendChild(modalBody);


    // Обработчик события для закрытия модального окна по щелчку вне его
    window.addEventListener('click', (event) => {
        if (event.target === modalDiv) {
            modalDiv.style.display = 'none';
        }
    });

    // Функция для открытия модального окна с сообщением
    function openModalPerson(header, body) {
        modalHeader.textContent = header;
        modalBody.innerHTML = body.replace(/\n/g, '<br>');
        modalDiv.style.display = 'block';
    }

    //
    function openModalQuestion(header, button) {
        modalHeader.textContent = header;
        modalDiv.style.display = 'block';
        modalBody.innerHTML = `<div class='quizModal'> <input type='date' class='quizInput'><button class='btn btn-sm btn-danger' onClick='getDateFromModal()'>${button}</button></div>`;
    }

    function openModalQuestionOpen(header, button) {
        modalHeader.textContent = header;
        modalDiv.style.display = 'block';
        modalBody.innerHTML = `<div class='quizModal'><button class='btn btn-sm btn-danger' onClick='clearCloseDate()'>${button}</button></div>`;
    }

    function openModalYesNo(header, buttonYes, buttonNo) {
        modalHeader.textContent = header;
        modalDiv.style.display = 'block';
        modalBody.innerHTML = `<div class='quizModal'><button class='btn btn-sm btn-danger' onClick='YesOrNoModal()'>${buttonYes}</button><button class='btn btn-sm btn-success' onClick='closeModal()'>${buttonNo}</button></div>`;
    }

    // Закрыть модальное окно
    function closeModal() {
        const modal = document.querySelector('.closeModal');
        modal.click();
    }
</script>

<script>
    function addUser() {
        const Personality = {};
        const personGUID = document.getElementById('personGUID').value;
        Personality.Name = $('#namePerson').val();
        Personality.Surname = $('#surnamePerson').val();
        Personality.Patronymic = $('#patronymicPerson').val();
        Personality.BirthDate = $('#birthDatePerson').val();
        Personality.JobTitle = $('#jobTitlePerson').val();
        Personality.location = $('#TTPerson').val();
        Personality.HireDate = $('#HireDate').val();
        Personality.DismissalsDate = $('#DismissalsDate').val();
        Personality.Schedule = $('#ScheduleGUID').val();
        Personality.Actual = $('.actual').val();
        const EntityGUID = document.getElementById('EntityGUID').value;
        const EntityCostGUID = document.getElementById('EntityCostGUID').value;
        Personality.Entity = EntityGUID;
        Personality.EntityCost = EntityCostGUID;
        Personality.NewPerson = $('#NewPerson').val();
        Personality.personGUID = personGUID;
        Personality.VersionStartDate = $('#VersionStartDate').val();
        Personality.VersionEndDate = $('#VersionEndDate').val();
        Personality.Tel = $('#tel').val();

        Personality.SNILS = $('#SNILSPerson').val()
        Personality.INN = $('#INNPerson').val()
        


        const json = JSON.stringify(Personality)
         $.ajax({
            type: "POST",
            url: '/Personality/PersonalityAdd',
            data: { json: json },
            datatype: "text",
            success: function (result) {
                $('#loading').hide();
                if (result.ok) {
                    $('#page').load('/Personality/PersonalityTable?showUnActual=1&page=1', function () {
                        $('#page').load(`/Personality/PersonalityVersions?typeGuid=${personGUID}&newPerson=2`, function () {
                            $('#tableMenu').show();
                        });
                    });
                }
                else {
                    openModalPerson('Ошибка', result.errorMessage);
                }
                console.log(result)
            },
            error: function (error) { 
                $('#loading').hide();
                openModalPerson('Ошибка', error.responseText);
                
            }
        });
    }
</script>

<script>
    const HireDate = document.getElementById('HireDate');
    const VersionStartDate = document.getElementById('VersionStartDate')
    const VersionEndDate = document.getElementById('VersionEndDate')
    const DismissalsDate = document.getElementById('DismissalsDate')

    HireDate.addEventListener('input', () => {
        const HireDateValue = HireDate.value;
        VersionStartDate.min = HireDateValue;
        DismissalsDate.min = HireDateValue;
    })

    // Если нет значение даты приема на работу, то вставляем сегодняшее число и ограничиваем рендж даты увольнения
    if (!HireDate.value) {
        HireDate.value = "@DateTime.Now.ToString("yyyy-MM-dd")";
        DismissalsDate.min = "@DateTime.Now.ToString("yyyy-MM-dd")";
    }

    // Подборка графика по выбранной должности
    const ScheduleGUID = document.getElementById('ScheduleGUID');
    const jobTitlePerson = document.getElementById('jobTitlePerson');

    if (!jobTitlePerson.value) { 
        ScheduleGUID.disabled = true;
    }

    jobTitlePerson.addEventListener('input', () => {
        jobTitlePersonValue = jobTitlePerson.options[jobTitlePerson.selectedIndex].text;
        $.ajax({
            type: 'POST',
            url: `/Personality/GetScheduleList?jobTitleName=${jobTitlePersonValue}`,
            data: { name: jobTitlePersonValue },
            success: function (data) {
                ScheduleGUID.disabled = false;
                let string = '';
                data.forEach(elem => {
                    string += `<option selected="selected" value = ${elem.guid} > ${elem.beginTime} - ${elem.endTime} </option>`;
                })
                let data1 = data;
                ScheduleGUID.innerHTML = `${string}`
            }
        });
    })

    // Ограничение минимума конца версии
    VersionStartDate.addEventListener('input', () => {
        VersionEndDate.min = VersionStartDate.value;
    })
    //Ограничение максимума начала версии
    VersionEndDate.addEventListener('input', () => {
        VersionStartDate.max = VersionEndDate.value;
    })

</script>

@* Отправляем JSON (Редактирование пользователя) *@
<script>
    function editUser() {
        const Personality = {};
        const personGUID = document.getElementById('personGUID').value;
        const personVersionGUID = document.getElementById('personVersionGUID').value;
        Personality.Guid = personVersionGUID;
        Personality.Name = $('#namePerson').val();
        Personality.Surname = $('#surnamePerson').val();
        Personality.Patronymic = $('#patronymicPerson').val();
        Personality.BirthDate = $('#birthDatePerson').val();
        Personality.JobTitle = $('#jobTitlePerson').val();
        Personality.location = $('#TTPerson').val();
        Personality.HireDate = $('#HireDate').val();
        Personality.DismissalsDate = $('#DismissalsDate').val();
        Personality.Schedule = $('#ScheduleGUID').val();
        Personality.Actual = $('.actual').val();
        Personality.VersionStartDate = $('#VersionStartDate').val();
        Personality.VersionEndDate = $('#VersionEndDate').val();
        const EntityGUID = document.getElementById('EntityGUID').value;
        const EntityCostGUID = document.getElementById('EntityCostGUID').value;
        Personality.Entity = EntityGUID;
        Personality.EntityCost = EntityCostGUID;
        Personality.NewPerson = $('#NewPerson').val();
        Personality.personGUID = personGUID;
        Personality.Tel = $('#tel').val();

        Personality.SNILS = $('#SNILSPerson').val()
        Personality.INN = $('#INNPerson').val()

        const json = JSON.stringify(Personality)
        $.ajax({
            type: "PUT",
            url: '/Personality/PersonalityPut',
            data: { json: json },
            datatype: "text",
            success: function (result) {
                if (result.ok) {
                    $('#page').load('/Personality/PersonalityTable?showUnActual=1&page=1', function () {
                        $('#page').load(`/Personality/PersonalityVersions?typeGuid=${personGUID}&newPerson=2`, function () {
                            $('#tableMenu').show();
                        });
                    });
                }
                else {
                    openModalPerson('Ошибка', result.errorMessage);
                }
            },
            error: function (error) {
                openModalPerson('Ошибка', error);
            }
        });
    }

    
</script>





