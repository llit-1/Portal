@model PersonalityEditModel

<div class="personalityVersionEditWrapper">
    <!--Блок добавления\редактирования работника-->
    <div class="panel panel-default panel-default-person modalPersonWidth"  id="personTable" style="margin-bottom:0px">



        <div class="titlePersontable">

            @*Изменение хедера на странице*@
            @if(Model.NewPerson == "1")
            {
                <h3>Данные пользователя</h3>
            }
            else {

                <h3>Данные версии пользователя</h3>

            }

            @if(@Model.NewPerson != null)
            {
                <input class="hidden" id="NewPerson" value="@Model.NewPerson"/>
            }

            <!--Выпадающий список состояний работника-->
            @if (Model?.PersonalitiesVersions == null || Model.PersonalitiesVersions?.Actual == 1)
            {
                <select class=" actual" id='actual'>
                    <option value="1" selected='selected' class="optionForColor">Активен</option>
                    <option value="2" class="optionForColor">Отстранен</option>
                    <option value="0" class="optionForColor">Уволен</option>
                </select>
            }
            else if (Model.PersonalitiesVersions?.Actual == 2)
            {
                <select class=" actual" id='actual' >
                    <option value="1" class="optionForColor">Активен</option>
                    <option value="2" selected='selected' class="optionForColor">Отстранен</option>
                    <option value="0" class="optionForColor">Уволен</option>
                </select>
            }
            else
            {
                <select class=" actual" id='actual' >
                    <option value="1" class="optionForColor">Активен</option>
                    <option value="2" class="optionForColor">Отстранен</option>
                    <option value="0" selected='selected' class="optionForColor">Уволен</option>
                </select>
            }
        </div>

        <hr>

        <!--Наполнение данных, если они есть-->
        <div class="personData">
            <!--Первый столбец-->
            @if (Model?.PersonalitiesVersions?.Personalities != null)
            {
                <form id="user-form">
                    <div class="leftBlockPersonData">
                        @* Добавление и заполнение данных *@
                        <label class="label-light">Фамилия</label>
                        <input required type="text" class="inputPersonData" placeholder="Введите фамилию" id="surnamePerson" value="@Model.PersonalitiesVersions.Surname">
                        <label class="label-light">Имя</label>
                        <input required type="text" class="inputPersonData" placeholder="Введите имя" id="namePerson" value="@Model.PersonalitiesVersions.Name">
                        <label class="label-light">Отчество</label>
                        <input type="text" class="inputPersonData" placeholder="Введите отчество" id="patronymicPerson" value="@Model.PersonalitiesVersions.Patronymic">
                        <label class="label-light">Дата рождения</label>
                        <input required type="date" min="1900-01-01" max="2010-01-01" class="inputPersonData" id="birthDatePerson" value="@Model.PersonalitiesVersions.Personalities.BirthDate.ToString("yyyy-MM-dd")">

                        <label class="label-light">Парт-таймер</label>
                        <div style="width:100%; float:left; max-height:500px; overflow-y:auto">
                            <select required id="partTimerId" class="inputPersonData" data-width="100%" value="">
                                @if (Model.PersonalitiesVersions.PartTimer != null && Model.PersonalitiesVersions.PartTimer == 1)
                                {
                                    <option selected value="1">Да</option>
                                    <option value="0">Нет</option>
                                } else {
                                    <option value="1">Да</option>
                                    <option selected value="0">Нет</option>
                                }
                            </select>
                        </div>

                        <label class="label-light">Должность</label>
                        <input type="hidden" id="personGUID" value="@Model.PersonalitiesVersions.Personalities.Guid">
                        <input type="hidden" id="personVersionGUID" value="@Model.PersonalitiesVersions.Guid">


                        @{
                            var disabled = false;
                            if(Model.PersonalitiesVersions.PartTimer != null && Model.PersonalitiesVersions.PartTimer == 1)
                            {
                                disabled = true;
                            }
                        }

                        @* Выбор должности *@
                        <div style="width:100%; float:left; max-height:500px; overflow-y:auto">
                            <select disabled="@disabled" required id="jobTitlePerson" class="inputPersonData" data-width="100%" value="@Model.PersonalitiesVersions.JobTitle?.Name">
                                @if (Model.JobTitles.FirstOrDefault(g => g.Guid == Model.PersonalitiesVersions.JobTitle?.Guid) != null)
                                {
                                    <option value="@Model.PersonalitiesVersions.JobTitle.Guid" selected>@Model.PersonalitiesVersions.JobTitle.Name</option>
                                } else {
                                    <option selected></option>
                                }
                                @foreach (var jobTitle in Model.JobTitles.OrderBy(g => g.Name))
                                {
                                    <option value="@jobTitle.Guid">@jobTitle.Name</option>
                                }
                            </select>
                        </div>

                        <label class="label-light">ИНН</label>
                        <input type="text" class="inputPersonData" maxlength="12" placeholder="Введите ИНН" id="INNPerson" value="@Model.PersonalitiesVersions.Personalities?.INN">

                    </div>

                    <div class="rightBlockPersonData">
                        <label class="label-light">ТТ</label>
                        @* Выбор ТТ *@
                        <div style="width:100%; float:left; max-height:500px; overflow-y:auto;display: flex;gap: 10px;">
                            <select required id="TTPerson" style="width: 90%;" class="inputPersonData" data-width="100%" value="@Model.PersonalitiesVersions.Location.Name" placeholder="Выберите ТТ">
                                @foreach (var location in Model.Locations.OrderBy(g => g.Name))
                                {
                                    if (location.Guid == Model.PersonalitiesVersions.Location.Guid)
                                    {
                                        <option selected value="@Model.PersonalitiesVersions.Location.Guid">@Model.PersonalitiesVersions.Location.Name</option>
                                    }

                                    <option value="@location.Guid">@location.Name</option>
                                }

                            </select>
                            <div class="ttmore" onclick="createModal()">@ViewBag.TTCount</div>
                        </div>

                        <label class="label-light">Дата приема на работу</label>
                        <input required type="date" class="inputPersonData" id="HireDate" min="1900-01-01" value="@Model.PersonalitiesVersions.HireDate.ToString("yyyy-MM-dd")">
                        <label class="label-light">Дата увольнения</label>
                        <input type="date" class="inputPersonData dissDate" min="@Model.PersonalitiesVersions.HireDate.ToString("yyyy-MM-dd")" id="DismissalsDate" value="@Model.PersonalitiesVersions.DismissalsDate?.ToString("yyyy-MM-dd")">

                        <label class="label-light">Время смены</label>
                        @* Выбор смены *@
                        <div style="width:100%; float:left; max-height:500px; overflow-y:auto">
                            <select disabled="@disabled" required id="ScheduleGUID" class="inputPersonData" data-width="100%" value="@Model.PersonalitiesVersions.Schedule?.Name">
                                @foreach (var schedule in Model.Schedules.OrderBy(g => g.Name))
                                {
                                    if (schedule.BeginTime == Model.PersonalitiesVersions.Schedule?.BeginTime && schedule.EndTime == Model.PersonalitiesVersions.Schedule?.EndTime && schedule.Name == Model.PersonalitiesVersions.Schedule?.Name)
                                    {
                                        <option selected="selected" value="@schedule.Guid">@schedule.BeginTime - @schedule.EndTime</option>
                                    }
                                    else
                                    {
                                        if (Model.PersonalitiesVersions.Schedule?.Name == schedule.Name)
                                        {
                                            <option value="@schedule.Guid">@schedule.BeginTime - @schedule.EndTime</option>
                                        }
                                    }
                                }
                            </select>
                        </div>

                        @* Выбор Юр. лица *@
                        <label class="label-light">Юр. лицо</label>
                        <div style="width:100%; float:left; max-height:500px; overflow-y:auto">
                            <select required id="EntityGUID" class="inputPersonData" data-width="100%" value="@Model.PersonalitiesVersions.Entity?.Name">
                                @if (Model.Entity.FirstOrDefault(g => g.Guid == Model.PersonalitiesVersions.Entity?.Guid) != null)
                                {
                                    <option selected="selected" disabled value="@Model.PersonalitiesVersions.Entity.Guid">@Model.PersonalitiesVersions.Entity.Name</option>
                                }
                                @foreach (var entity in Model.Entity.OrderBy(g => g.Name))
                                {
                                    <option value="@entity.Guid">@entity.Name</option>
                                }
                            </select>
                        </div>

                        <label class="label-light">СНИЛС</label>
                        <input type="text" class="inputPersonData" placeholder="Введите СНИЛС" id="SNILSPerson" value="@Model.PersonalitiesVersions.Personalities?.SNILS">

                        <label class="label-light">Юр. лицо разнесения затрат</label>
                        <div style="width:100%; float:left; max-height:500px; overflow-y:auto">
                            @if (User.IsInRole("employee_control_ukvh"))
                            {
                                <select required id="EntityCostGUID" class="inputPersonData" data-width="100%" disabled>
                                    <option selected="selected" value="27DF2DD0-2EBE-4CDE-A46C-08DBF1826A1F">ООО «УК Вкусный Хлеб»</option>
                                </select>
                            } else {
                                <select required id="EntityCostGUID" class="inputPersonData" data-width="100%">
                                    @if (Model.Entity.FirstOrDefault(g => g.Guid == Model.PersonalitiesVersions.EntityCostGuid) != null)
                                    {
                                        <option selected="selected" disabled value="@Model.PersonalitiesVersions.EntityCostGuid">@Model.Entity.FirstOrDefault(x => x.Guid == Model.PersonalitiesVersions.EntityCostGuid).Name</option>
                                    }
                                    @foreach (var entity in Model.Entity.OrderBy(g => g.Name))
                                    {
                                        <option value="@entity.Guid">@entity.Name</option>
                                    }
                                </select>
                            }
                        </div>
                    </div>

                    <div class='rightBlockPersonData'>
                        @* Выбор Юр. лица разнесения затрат *@


                        @if(Model.NewPerson == "1")
                        {
                            <label class="label-light hidden">Период действия версии</label>
                            <div class='rightBlockPersonData__versions hidden'>
                                <label class="label-light">С</label>
                                <div>
                                    <input disable type="date" class="inputPersonData correctForData" id="VersionStartDate" value="@Model.PersonalitiesVersions.VersionStartDate?.ToString("yyyy-MM-dd")">
                                </div>
                                <label class="label-light">По</label>
                                <div>
                                    <input disable type="date" class="inputPersonData correctForData" id="VersionEndDate" value="@Model.PersonalitiesVersions.VersionEndDate?.ToString("yyyy-MM-dd")">
                                </div>
                            </div>
                        }
                        else if(Model.NewPerson == "2")
                        {
                            <label class="label-light">Период действия версии</label>
                            <input class='hidden' value='@Model.NewPerson' id='check_person'>
                            <div class='rightBlockPersonData__versions'>
                                <label class="label-light">С</label>
                                <div>
                                    <input required type="date" class="inputPersonData correctForData" id="VersionStartDate" min="@Model.PersonalitiesVersions.HireDate.ToString("yyyy-MM-dd")" max="@Model.PersonalitiesVersions.VersionEndDate?.ToString("yyyy-MM-dd")" value="@Model.PersonalitiesVersions.VersionStartDate?.ToString("yyyy-MM-dd")">
                                </div>
                                <label class="label-light">По</label>
                                <div>
                                    <input type="date" class="inputPersonData correctForData" id="VersionEndDate" min="@Model.PersonalitiesVersions.VersionStartDate?.ToString("yyyy-MM-dd")" value="@Model.PersonalitiesVersions.VersionEndDate?.ToString("yyyy-MM-dd")">
                                </div>
                            </div>
                        }
                        else
                        {
                            <label class="label-light">Период действия версии</label>
                            <input class='hidden' value='@Model.NewPerson' id='check_person'>
                            <div class='rightBlockPersonData__versions'>
                                <label class="label-light">С</label>
                                <div>
                                    <input required type="date" class="inputPersonData correctForData" min="@Model.PersonalitiesVersions.HireDate.ToString("yyyy-MM-dd")" id="VersionStartDate" value="@DateTime.Now.ToString("yyyy-MM-dd")">
                                </div>
                                <label class="label-light">По</label>
                                <div>
                                    <input type="date" class="inputPersonData correctForData" id="VersionEndDate" min="@DateTime.Now.ToString("yyyy-MM-dd")">
                                </div>
                            </div>
                        }

                        @{
                            <label class="label-light" style="padding-top: 12px">Номер телефона</label>
                            <input style="margin-bottom: 0;" type="text" class="inputPersonData" placeholder="Введите номер телефона" maxlength="10" id="tel" value="@Model?.PersonalitiesVersions?.Personalities?.Phone">
                        }

                        <label class="label-light" style="padding-top: 12px">Email</label>
                        <input type="text" class="inputPersonData" placeholder="Введите email" id="email" value="@Model?.PersonalitiesVersions?.Personalities?.Email">

                        <button class="buttonLMK" type="button" onclick="openModalLMK()" id="buttonLMK">ЛМК</button>

                        @if (Model.NewPerson == "1")
                        {
                            <div class="buttonAddPerson">
                                <button class="buttonAddPersonData" type="submit">ДОБАВИТЬ</button>
                                <button class="buttonAddPersonData buttonClearPersonData" onclick="clearInputs()">ОЧИСТИТЬ</button>
                            </div>
                        }
                        else
                        {
                            <div class="buttonAddPerson">
                                <button class="buttonAddPersonData" type="submit">СОХРАНИТЬ</button>
                                <button class="buttonAddPersonData buttonClearPersonData" onclick="clearInputs()">ОЧИСТИТЬ</button>
                            </div>
                        }

                    </div>
                </form>

                <div class="modalLMK-overlay hidden" id="modalLMK">
                    <div class="modalLMK-container">
                        <div class="modalLMK-header"> Заполнение данных ЛМК </div>
                        <div class="modalLMK-body">

                            <div class="lmkLeftSideWrapper">

                            <label class="label-light">Вид документа*</label>
                            <div style="width:100%; float:left; max-height:500px; overflow-y:auto">
                                <select placeholder="Выберите вид документа" id="lmkDocumentType" class="inputPersonData lmkData" data-width="100%">

                                    @foreach(var item in Model.DocumentTypes)
                                    {
                                        if(Model.PersonalityLMK != null && Model.PersonalityLMK.DocumentTypeId == item.ID)
                                        {
                                            <option selected value="@item.ID">@item.Name</option>
                                        } else {
                                            <option value="@item.ID">@item.Name</option>
                                        }
                                    }

                                </select>
                            </div>

                            <label class="label-light">Дата прохождения мед. комиссии*</label>
                            <input type="date" class="inputPersonData lmkData" id="MedComissionDate" value="@Model.PersonalityLMK?.MedComissionDate.Value.ToString("yyyy-MM-dd")">

                            <label class="label-light">Дата прохождения ФЛГ*</label>
                            <input type="date" class="inputPersonData lmkData" id="FLGDate" value="@Model.PersonalityLMK?.FLGDate.Value.ToString("yyyy-MM-dd")">

                            <label class="label-light">Срок действия аттестации*</label>
                            <input type="date" class="inputPersonData lmkData" id="ValidationDate" value="@Model.PersonalityLMK?.ValidationDate.Value.ToString("yyyy-MM-dd")">

                            <label class="checkbox-item">
                                @if(Model.PersonalityLMK?.VacZonne == 1)
                                {
                                    <input checked type="checkbox" id="VacZonne">
                                } else {
                                    <input type="checkbox" id="VacZonne">
                                }
                                <span class="checkmark"></span>
                                <span class="checkbox-label">Вакцинация от Дизентерии Зонне </span>
                            </label>

                            <label class="checkbox-item">
                                @if(Model.PersonalityLMK?.VacGepatit == 1)
                                {
                                    <input checked type="checkbox" id="VacGepatit">
                                } else {
                                    <input type="checkbox" id="VacGepatit">
                                }
                                <span class="checkmark"></span>
                                <span class="checkbox-label">Вакцинация  от Гепатита А</span>
                            </label>

                            <label class="checkbox-item">
                                @if(Model.PersonalityLMK?.VacReject == 1)
                                {
                                    <input checked type="checkbox" id="VacReject">
                                } else {
                                    <input type="checkbox" id="VacReject">
                                }
                                <span class="checkmark"></span>
                                <span class="checkbox-label">Отказ от вакцинации</span>
                            </label>

                        </div>

                    </div>
                    <div class="modalLMK-footer">
                        <button class="buttonLMK-close" id="buttonLMK-close" onclick="openModalLMK()" type="button">закрыть</button>
                    </div>
                </div>
            </div>
        }
        else
        {
            <form id="user-form">
                <div class="leftBlockPersonData">
                    <label class="label-light">Фамилия</label>
                    <input required type="text" class="inputPersonData" placeholder="Введите фамилию" id="surnamePerson">
                    <label class="label-light">Имя</label>
                    <input required type="text" class="inputPersonData" placeholder="Введите имя" id="namePerson">               
                    <label class="label-light">Отчество</label>
                    <input type="text" class="inputPersonData" placeholder="Введите отчество" id="patronymicPerson" >
                    <label class="label-light">Дата рождения</label>
                    <input required type="date" class="inputPersonData" id="birthDatePerson" min="1900-01-01" max="2010-01-01">

                    <label class="label-light">Парт-таймер</label>
                    <div style="width:100%; float:left; max-height:500px; overflow-y:auto">
                        <select required id="partTimerId" class="inputPersonData" data-width="100%" value="">
                            <option value="1">Да</option>
                            <option selected value="0">Нет</option>
                        </select>
                    </div>

                    <label class="label-light">Должность</label>
                    <input required type="hidden" id="personGUID" value="0">

                    @* Выбор должности *@
                    <div style="width:100%; float:left; max-height:500px; overflow-y:auto">
                        <select placeholder="Выберите должность" required id="jobTitlePerson" class="inputPersonData" data-width="100%">
                            @foreach (var jobTitle in Model.JobTitles.OrderBy(g => g.Name))
                            {
                                if (Model.JobTitles.FirstOrDefault(g => g.Guid == jobTitle.Guid) != null)
                                {
                                    <option value="@jobTitle.Guid">@jobTitle.Name</option>
                                }
                                else
                                {
                                    <option value="@jobTitle.Guid">@jobTitle.Name</option>
                                }
                            }
                        </select>
                    </div>

                    <label class="label-light">ИНН</label>
                    <input type="text" class="inputPersonData" maxlength="12" placeholder="Введите ИНН" id="INNPerson" value="">
                </div>
                
                <div class="rightBlockPersonData">
                    <label class="label-light">ТТ</label>
                    @* Выбор ТТ *@
                    <div style="width:100%; float:left; max-height:500px; overflow-y:auto">
                        <select placeholder="Выберите ТТ" required id="TTPerson" class="inputPersonData" data-width="100%">
                            @foreach (var location in Model.Locations.OrderBy(g => g.Name))
                            {
                                if (Model.Locations.FirstOrDefault(g => g.Guid == location.Guid) != null)
                                {
                                    <option selected="selected" value="@location.Guid">@location.Name</option>
                                }
                                else
                                {
                                    <option value="@location.Guid">@location.Name</option>
                                }
                            }
                        </select>
                    </div>

                    <label class="label-light">Дата приема на работу</label>
                    <input required type="date" class="inputPersonData" id="HireDate">
                    <label class="label-light">Дата увольнения</label>
                    <input type="date" class="inputPersonData dissDate" id="DismissalsDate">
                    <label class="label-light">Время смены</label>
                    @* Выбор смены *@
                    <div style="width:100%; float:left; max-height:500px; overflow-y:auto">
                        <select placeholder="Выберите смену" required id="ScheduleGUID" class="inputPersonData" data-width="100%">
                            @foreach (var schedule in Model.Schedules.OrderBy(g => g.Name))
                            {
                                if (Model.Schedules.FirstOrDefault(g => g.Guid == schedule.Guid) != null)
                                {
                                    <option selected="selected" value="@schedule.Guid">@schedule.BeginTime - @schedule.EndTime</option>
                                }
                                else
                                {
                                    <option value="@schedule.Guid">@schedule.Name</option>
                                }
                            }
                        </select>
                    </div>

                    <label class="label-light">Юр. лицо</label>
                    <div style="width:100%; float:left; max-height:500px; overflow-y:auto">
                        <select required id="EntityGUID" class="inputPersonData" data-width="100%">
                            @foreach (var entity in Model.Entity.OrderBy(g => g.Name))
                            {
                                <option selected="selected" value="@entity.Guid">@entity.Name</option>
                            }
                        </select>
                    </div>

                    <label class="label-light">СНИЛС</label>
                    <input type="text" class="inputPersonData" placeholder="Введите СНИЛС" id="SNILSPerson" value="">

                    <label class="label-light">Юр. лицо разнесения затрат</label>
                    <div style="width:100%; float:left; max-height:500px; overflow-y:auto">

                            @if (User.IsInRole("employee_control_ukvh"))
                            {
                                <select required id="EntityCostGUID" class="inputPersonData" data-width="100%" disabled>
                                     <option selected value="27DF2DD0-2EBE-4CDE-A46C-08DBF1826A1F">ООО «УК Вкусный Хлеб»</option>
                                </select> 

                            }
                            else
                            {
                                <select required id="EntityCostGUID" class="inputPersonData" data-width="100%">
                                @foreach (var entity in Model.Entity.OrderBy(g => g.Name))
                                {
                                    <option selected="selected" value="@entity.Guid">@entity.Name</option>
                                    
                                }
                                </select>
                            }
                    </div>
                </div>

                <div class='rightBlockPersonData'>
                    @* Выбор Юр. лица *@
                    
                    @if(Model.NewPerson == "1")
                    {
                    <label class="label-light hidden">Период действия версии</label>
                    <div class='rightBlockPersonData__versions hidden'>
                        <label class="label-light">С</label>
                        <div>
                            <input disable type="date" class="inputPersonData correctForData" id="VersionStartDate">
                        </div>
                        <label class="label-light">По</label>
                        <div>
                            <input disable type="date" class="inputPersonData correctForData" id="VersionEndDate">
                        </div>
                    </div>
                    }
                    else
                    {
                    <label class="label-light">Период действия версии</label>
                    <div class='rightBlockPersonData__versions'>
                        <label class="label-light">С</label>
                        <div>
                            <input required type="date" class="inputPersonData correctForData" id="VersionStartDate">
                        </div>
                        <label class="label-light">По</label>
                        <div>
                            <input required type="date" class="inputPersonData correctForData" id="VersionEndDate">
                        </div>
                    </div>   
                    }

                    <label class="label-light">Номер телефона</label>
                    <input style="margin-bottom: 0;" type="text" class="inputPersonData" placeholder="Введите номер телефона" maxlength="10" id="tel" value="">

                    <label class="label-light" style="padding-top: 12px">Email</label>
                    <input type="text" class="inputPersonData" placeholder="Введите email" id="email" value="">

                    <button class="buttonLMK" type="button" onclick="openModalLMK()" id="buttonLMK">ЛМК</button>

                    <div class="buttonAddPerson ">
                        <button class="buttonAddPersonData" type="submit">ДОБАВИТЬ</button>
                        <button class="buttonAddPersonData buttonClearPersonData" onclick="clearInputs()">ОЧИСТИТЬ</button>
                    </div>
                </div>
            </form>


             <div class="modalLMK-overlay hidden" id="modalLMK">
                <div class="modalLMK-container">
                    <div class="modalLMK-header"> Заполнение данных ЛМК </div>
                    <div class="modalLMK-body">
                        
                        <div class="lmkLeftSideWrapper">

                            <label class="label-light">Вид документа*</label>
                            <div style="width:100%; float:left; max-height:500px; overflow-y:auto">
                                <select placeholder="Выберите вид документа" id="lmkDocumentType" class="inputPersonData lmkData" data-width="100%">
                                    @foreach(var item in Model.DocumentTypes)
                                    {
                                        <option value="@item.ID">@item.Name</option>
                                    }
                                </select>
                            </div>

                            <label class="label-light">Дата прохождения мед. комиссии*</label>
                            <input type="date" class="inputPersonData lmkData" id="MedComissionDate" value="">

                            <label class="label-light">Дата прохождения ФЛГ*</label>
                            <input type="date" class="inputPersonData lmkData" id="FLGDate" value="">

                            <label class="label-light">Срок действия аттестации*</label>
                            <input type="date" class="inputPersonData lmkData" id="ValidationDate" value="">

                            <label class="checkbox-item">
                                <input type="checkbox" id="VacZonne">
                                <span class="checkmark"></span>
                                <span class="checkbox-label">Вакцинация от Дизентерии Зонне </span>
                            </label>

                            <label class="checkbox-item">
                                <input type="checkbox" id="VacGepatit">
                                <span class="checkmark"></span>
                                <span class="checkbox-label">Вакцинация  от Гепатита А</span>
                            </label>

                            <label class="checkbox-item">
                                <input type="checkbox" id="VacReject">
                                <span class="checkmark"></span>
                                <span class="checkbox-label">Отказ от вакцинации</span>
                            </label>

                        </div>

                    </div>
                    <div class="modalLMK-footer">
                        <button class="buttonLMK-close" id="buttonLMK-close" onclick="openModalLMK()" type="button">закрыть</button>
                    </div>
                </div>
            </div>
        }
    </div>
    
</div>

</div>


<script>
    // Смена состояния сотрудника в зависимости от заполненности даты увольнения
    // const actualPicker = document.querySelector('.actual');
    // const valueDismissalsDate = document.querySelector('.dissDate');

    // if (valueDismissalsDate.value) {
    //     document.getElementById('VersionStartDate').value = valueDismissalsDate.value;
    //     document.getElementById('VersionStartDate').disabled = true;
    // } else {
    //     document.getElementById('VersionStartDate').disabled = false;
    // }

    // valueDismissalsDate.addEventListener('input', () => {
    //     @* Изменение статуса сотрудника при изменении даты увольнения *@
    //     if(valueDismissalsDate.value != '') {
    //         actualPicker.innerHTML = "<option value='1'>Активен</option><option value='2' >Отстранен</option><option value='0' selected>Уволен</option>";       
    //     } else {
    //         actualPicker.innerHTML = "<option value='1' selected>Активен</option><option value='2' >Отстранен</option><option value='0' >Уволен</option>";
    //     }
    //     @* Изменение даты начала версии при изменении даты увольнения *@
    //     if (valueDismissalsDate.value) {
    //         document.getElementById('VersionStartDate').value = valueDismissalsDate.value;
    //         document.getElementById('VersionStartDate').disabled = true;
    //     } else {
    //         document.getElementById('VersionStartDate').disabled = false;
    //     }
        
    // })

    function openModalLMK() {
        // Создание модального окна для введения данных ЛМК
        const modalLMK = document.getElementById("modalLMK")
        modalLMK.classList.toggle("hidden")
    }

    $("#tableMenu").hide();

    // Возврат к таблице
    const NewPerson = document.getElementById('NewPerson').value; // 1 - новый сотрудник, 0 и 2 - не новый
    const personGUID = document.getElementById('personGUID').value;
    if(NewPerson == 1)
    {
        $('#back').unbind('click');
        $('#back').click(function () { location.hash = "#Personality" });
    } else {
        $('#back').unbind('click');
        $('#back').click(function () { PersonalityVersions(personGUID, 2) });
    }

    function clearInputs() {
        // Получаем все элементы input на странице и очищаем их значение
        document.querySelectorAll(".inputPersonData").forEach(input => {
            if(input.id != "EntityCostGUID")
            {
                input.value = ""
            }
            
        });
    }

    // Валидация формы + отправка
    document.getElementById("user-form").addEventListener("submit", function(event) {
        event.preventDefault();
        if (this.checkValidity()) {
            if(location.hash == '#EditPerson'){
                editUser();
            }
            else {
                addUser();
            }
        }
    })
</script>



   
<script>

    document.getElementById('SNILSPerson').addEventListener('input', function(e) {
        // 1. Удаляем все не-цифры (дефисы, пробелы и т.д.)
        let value = e.target.value.replace(/\D/g, '');

        // 2. Добавляем дефисы и пробел
        if (value.length > 3) value = value.slice(0, 3) + '-' + value.slice(3);
        if (value.length > 7) value = value.slice(0, 7) + '-' + value.slice(7);
        if (value.length > 11) value = value.slice(0, 11) + ' ' + value.slice(11);

        // 3. Обрезаем лишнее (если больше 11 цифр)
        e.target.value = value.slice(0, 14); // Максимум 14 символов (XXX-XXX-XXX XX)
    });
    

</script>


<script>
    const name = document.getElementById('namePerson');
    const surname = document.getElementById('surnamePerson');
    if(name.value == '' && surname.value == '') {
        clearInputs();
    }
</script>

<script>
    // CSS стили модального окна
    const modalStyle = `
            position: fixed;
            z-index: 100;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.4);
            display: none;
        `;

    // Создаем div элемент для модального окна
    const modalDiv = document.createElement('div');
    modalDiv.style = modalStyle;
    modalDiv.classList.add('closeModal')
    document.body.appendChild(modalDiv);

    // CSS стили контента модального окна
    const modalContentStyle = `
            background-color: #fefefe;
            margin: 10% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 80%;
            max-width: 600px;
        `;

    // Создаем div элемент для контента модального окна
    const modalContentDiv = document.createElement('div');
    modalContentDiv.style = modalContentStyle;
    modalDiv.appendChild(modalContentDiv);

    // Создаем кнопку закрытия модального окна
    const closeBtn = document.createElement('span');
    closeBtn.textContent = '×';
    closeBtn.style = `
            float: right;
            font-size: 24px;
            font-weight: bold;
            cursor: pointer;
        `;

    // Добавляем обработчик события для закрытия модального окна
    closeBtn.addEventListener('click', () => {
        modalDiv.style.display = 'none';
    });

    // Создаем заголовок модального окна
    const modalHeader = document.createElement('h2');
    modalHeader.style = `
            border-bottom: 1px solid #e5e5e5;
            padding-bottom: 10px
        ;`;
    modalContentDiv.appendChild(closeBtn);
    modalContentDiv.appendChild(modalHeader);

    // Создаем тело модального окна
    const modalBody = document.createElement('div');
    modalBody.style = `
            padding-top: 15px;
        `;
    modalContentDiv.appendChild(modalBody);


    // Обработчик события для закрытия модального окна по щелчку вне его
    window.addEventListener('click', (event) => {
        if (event.target === modalDiv) {
            modalDiv.style.display = 'none';
        }
    });

    // Функция для открытия модального окна с сообщением
    function openModalPerson(header, body) {
        modalHeader.textContent = header;
        modalBody.innerHTML = body.replace(/\n/g, '<br>');
        modalDiv.style.display = 'block';
    }

    //
    function openModalQuestion(header, button) {
        modalHeader.textContent = header;
        modalDiv.style.display = 'block';
        modalBody.innerHTML = `<div class='quizModal'> <input type='date' class='quizInput'><button class='btn btn-sm btn-danger' onClick='getDateFromModal()'>${button}</button></div>`;
    }

    function openModalQuestionOpen(header, button) {
        modalHeader.textContent = header;
        modalDiv.style.display = 'block';
        modalBody.innerHTML = `<div class='quizModal'><button class='btn btn-sm btn-danger' onClick='clearCloseDate()'>${button}</button></div>`;
    }

    function openModalYesNo(header, buttonYes, buttonNo) {
        modalHeader.textContent = header;
        modalDiv.style.display = 'block';
        modalBody.innerHTML = `<div class='quizModal'><button class='btn btn-sm btn-danger' onClick='YesOrNoModal()'>${buttonYes}</button><button class='btn btn-sm btn-success' onClick='closeModal()'>${buttonNo}</button></div>`;
    }

    // Закрыть модальное окно
    function closeModal() {
        const modal = document.querySelector('.closeModal');
        modal.click();
    }
</script>

<script>
    function addUser() {

        const LMK = validateLMK()

        if(LMK === false)
        {
            alert("Вы не заполнили обязательные пола ЛМК")
            return;
        }

        const Personality = {};
        const personGUID = document.getElementById('personGUID').value;
        Personality.Name = $('#namePerson').val().trim();
        Personality.Surname = $('#surnamePerson').val().trim();
        Personality.Patronymic = $('#patronymicPerson').val().trim();
        Personality.BirthDate = $('#birthDatePerson').val();
        Personality.JobTitle = $('#jobTitlePerson').val() ? $('#jobTitlePerson').val() : null;
        Personality.location = $('#TTPerson').val();
        Personality.HireDate = $('#HireDate').val();
        Personality.DismissalsDate = $('#DismissalsDate').val();
        Personality.Schedule = $('#ScheduleGUID').val() ? $('#ScheduleGUID').val() : null;
        Personality.Actual = $('.actual').val();
        const EntityGUID = document.getElementById('EntityGUID').value;
        const EntityCostGUID = document.getElementById('EntityCostGUID').value;
        Personality.Entity = EntityGUID;
        Personality.EntityCost = EntityCostGUID;
        Personality.NewPerson = $('#NewPerson').val();
        Personality.personGUID = personGUID;
        Personality.VersionStartDate = $('#VersionStartDate').val();
        Personality.VersionEndDate = $('#VersionEndDate').val();
        Personality.Tel = $('#tel').val().trim();
        Personality.Email = $("#email").val().trim();
        Personality.PartTimer = $("#partTimerId").val().trim();

        if(Personality.Email.length < 2)
        {
            Personality.Email = null;
        }

        Personality.SNILS = $('#SNILSPerson').val().trim()
        Personality.INN = $('#INNPerson').val().trim()
        Personality.LMK = LMK;

        const json = JSON.stringify(Personality)
         $.ajax({
            type: "POST",
            url: '/Personality/PersonalityAdd',
            data: { json: json },
            datatype: "text",
            success: function (result) {
                $('#loading').hide();
                if (result.ok) {
                    $('#page').load('/Personality/PersonalityTable?showUnActual=1&page=1', function () {
                        $('#page').load(`/Personality/PersonalityVersions?typeGuid=${personGUID}&newPerson=2`, function () {
                            $('#tableMenu').show();
                        });
                    });
                }
                else {
                    openModalPerson('Ошибка', result.errorMessage);
                }
                console.log(result)
            },
            error: function (error) { 
                $('#loading').hide();
                openModalPerson('Ошибка', error.responseText);
                
            }
        });
    }
</script>

<script>
    const HireDate = document.getElementById('HireDate');
    const VersionStartDate = document.getElementById('VersionStartDate')
    const VersionEndDate = document.getElementById('VersionEndDate')
    const DismissalsDate = document.getElementById('DismissalsDate')

    HireDate.addEventListener('input', () => {
        const HireDateValue = HireDate.value;
        VersionStartDate.min = HireDateValue;
        DismissalsDate.min = HireDateValue;
    })

    // Если нет значение даты приема на работу, то вставляем сегодняшее число и ограничиваем рендж даты увольнения
    if (!HireDate.value) {
        HireDate.value = "@DateTime.Now.ToString("yyyy-MM-dd")";
        DismissalsDate.min = "@DateTime.Now.ToString("yyyy-MM-dd")";
    }

    // Подборка графика по выбранной должности
    const ScheduleGUID = document.getElementById('ScheduleGUID');
    const jobTitlePerson = document.getElementById('jobTitlePerson');

    if (!jobTitlePerson.value) { 
        ScheduleGUID.disabled = true;
    }

    jobTitlePerson.addEventListener('input', () => {
        jobTitlePersonValue = jobTitlePerson.options[jobTitlePerson.selectedIndex].value;
        $.ajax({
            type: 'POST',
            url: `/Personality/GetScheduleList?jobTitleGuid=${jobTitlePersonValue}`,
            data: { name: jobTitlePersonValue },
            success: function (data) {
                ScheduleGUID.disabled = false;
                let string = '';
                data.forEach(elem => {
                    string += `<option selected="selected" value = ${elem.guid} > ${elem.beginTime} - ${elem.endTime} </option>`;
                })
                let data1 = data;
                ScheduleGUID.innerHTML = `${string}`
            }
        });
    })

    const partTimerId = document.getElementById("partTimerId").addEventListener('change', (e) => {
        console.log(e.target.value)
        if(e.target.value == "1")
        {
            ScheduleGUID.disabled = true;
            ScheduleGUID.value = null;
            jobTitlePerson.disabled = true;
            jobTitlePerson.value = null;
        } else {
            ScheduleGUID.disabled = false;
            jobTitlePerson.disabled = false;
        }
    })


    // Ограничение минимума конца версии
    VersionStartDate.addEventListener('input', () => {
        VersionEndDate.min = VersionStartDate.value;
    })
    //Ограничение максимума начала версии
    VersionEndDate.addEventListener('input', () => {
        VersionStartDate.max = VersionEndDate.value;
    })

</script>

@* Отправляем JSON (Редактирование пользователя) *@
<script>
    function editUser() {

        const LMK = validateLMK()


        if(LMK === false)
        {
            alert("Вы не заполнили обязательные пола ЛМК")
            return;
        }

        const Personality = {};
        const personGUID = document.getElementById('personGUID').value;
        const personVersionGUID = document.getElementById('personVersionGUID').value;
        Personality.Guid = personVersionGUID;
        Personality.Name = $('#namePerson').val().trim();
        Personality.Surname = $('#surnamePerson').val().trim();
        Personality.Patronymic = $('#patronymicPerson').val().trim();
        Personality.BirthDate = $('#birthDatePerson').val();
        Personality.JobTitle = $('#jobTitlePerson').val() ? $('#jobTitlePerson').val() : null;
        Personality.location = $('#TTPerson').val();
        Personality.HireDate = $('#HireDate').val();
        Personality.DismissalsDate = $('#DismissalsDate').val();
        Personality.Schedule = $('#ScheduleGUID').val() ? $('#ScheduleGUID').val() : null;
        Personality.Actual = $('.actual').val();
        Personality.VersionStartDate = $('#VersionStartDate').val();
        Personality.VersionEndDate = $('#VersionEndDate').val();
        const EntityGUID = document.getElementById('EntityGUID').value;
        const EntityCostGUID = document.getElementById('EntityCostGUID').value;
        Personality.Entity = EntityGUID;
        Personality.EntityCost = EntityCostGUID;
        Personality.NewPerson = $('#NewPerson').val();
        Personality.personGUID = personGUID;
        Personality.Tel = $('#tel').val().trim();
        Personality.Email = $("#email").val().trim();
        if(Personality.Email.length < 2)
        {
            Personality.Email = null;
        }
        Personality.SNILS = $('#SNILSPerson').val().trim()
        Personality.INN = $('#INNPerson').val().trim()
        Personality.PartTimer = $("#partTimerId").val().trim();
        Personality.LMK = LMK;

        const json = JSON.stringify(Personality)
        $.ajax({
            type: "PUT",
            url: '/Personality/PersonalityPut',
            data: { json: json },
            datatype: "text",
            success: function (result) {
                if (result.ok) {
                    $('#page').load('/Personality/PersonalityTable?showUnActual=1&page=1', function () {
                        $('#page').load(`/Personality/PersonalityVersions?typeGuid=${personGUID}&newPerson=2`, function () {
                            $('#tableMenu').show();
                        });
                    });
                }
                else {
                    openModalPerson('Ошибка', result.errorMessage);
                }
            },
            error: function (error) {
                openModalPerson('Ошибка', error);
            }
        });
    }
    
    function validateLMK() {

        const lmkDocumentType = document.getElementById("lmkDocumentType")
        const MedComissionDate = document.getElementById("MedComissionDate")
        const FLGDate = document.getElementById("FLGDate")
        const ValidationDate = document.getElementById("ValidationDate")
        let VacZonne = document.getElementById("VacZonne")
        let VacGepatit = document.getElementById("VacGepatit")
        let VacReject = document.getElementById("VacReject")

        const lmkData = document.querySelectorAll(".lmkData")

        if(VacZonne.checked) { VacZonne = 1 } else { VacZonne = 0 }
        if(VacGepatit.checked) { VacGepatit = 1 } else { VacGepatit = 0 }
        if(VacReject.checked) { VacReject = 1 } else { VacReject = 0 }



        let result;

        result = {
            DocumentTypeId: lmkDocumentType.value,
            MedComissionDate: MedComissionDate.value,
            FLGDate: FLGDate.value,
            ValidationDate: ValidationDate.value,
            VacZonne: VacZonne,
            VacGepatit: VacGepatit,
            VacReject: VacReject
        }

        lmkData.forEach(element => {
            if(!element.value)
            {
                result = false;
            }
        })

        return result;

    }


</script>


<style>
    .ttmore {
        border: 1px solid black;
        height: 4vh;
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 0;
        width: 20%;
        border: 1px solid #ccc;
        border-radius: 2px;
        box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);
        cursor: pointer;
        color: green;
        font-weight: 600;
    }

    .select2-container--bootstrap4 .select2-selection__rendered {
        font-size: 11px !important;
    }

    span.select2-dropdown {
        margin-top: 30px !important;
    }

    .selectMoreTTButtons {
        width: 100%;
        display: flex;
        justify-content: space-between;

    }

    .selectMoreTTButtons button {
            width: fit-content;
            height: 25px;
            font-size: 9px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 10px;
    }

</style>

<script>

         // Функция для создания модального окна
    function createModal() {
        // Создаем элементы
        const modal = document.createElement("div");
        const modalContent = document.createElement("div");
        const closeBtn = document.createElement("span");
        const title = document.createElement("h2");
        const text = document.createElement("p");

        title.style.textAlign = "center";
        title.style.fontSize = "14px";
        title.style.paddingBottom = "10px"

        // Добавляем классы и атрибуты
        modal.classList.add("modal");
        modalContent.classList.add("modal-content");
        closeBtn.classList.add("close");
        closeBtn.innerHTML = "&times;"; // Крестик для закрытия
        title.textContent = "Выбор дополнительных точек";
        text.innerHTML = `
            <div style="width:100%">
                <select id="tt" class="form-control selectors" data-width="100%" multiple="multiple">
                </select>
            </div>
            
            <div class="selectMoreTTButtons">
                <button class="btn btn-gray" onClick='removeModal()' type="button"> Отмена </button>
                <button class="btn btn-success" onClick="SaveMoreTT()" type="button">Сохранить</button>
            </div>
            `;

        // Добавляем стили через JavaScript
        modal.style.display = "flex";
        modal.style.position = "fixed";
        modal.style.top = "0";
        modal.style.left = "0";
        modal.style.width = "100%";
        modal.style.height = "100%";
        modal.style.backgroundColor = "rgba(0, 0, 0, 0.5)";
        modal.style.justifyContent = "center";
        modal.style.alignItems = "center";
        modal.style.zIndex = "1000";

        modalContent.style.backgroundColor = "white";
        modalContent.style.padding = "20px 20px 10px 20px";
        modalContent.style.borderRadius = "10px";
        modalContent.style.width = "300px";
        modalContent.style.boxShadow = "0 4px 8px rgba(0, 0, 0, 0.2)";
        modalContent.style.position = "relative";

        closeBtn.style.position = "absolute";
        closeBtn.style.top = "10px";
        closeBtn.style.right = "10px";
        closeBtn.style.fontSize = "24px";
        closeBtn.style.cursor = "pointer";

        closeBtn.addEventListener("mouseenter", () => {
            closeBtn.style.color = "red";
        });

        closeBtn.addEventListener("mouseleave", () => {
            closeBtn.style.color = "black";
        });

        // Собираем структуру
        modalContent.appendChild(closeBtn);
        modalContent.appendChild(title);
        modalContent.appendChild(text);
        modal.appendChild(modalContent);
        document.body.appendChild(modal);

        // Инициализация select2 после добавления элемента в DOM
        $('#tt').select2({
            theme: "bootstrap4",
            language: "ru",
            closeOnSelect: false,
            placeholder: "выберите ТТ..."
        });

        // События изменения в селекторах
        $('.selectors').on('select2:select', function (e) { SelectChange(this) });
        $('.selectors').on('select2:unselect', function (e) { SelectChange(this) });

        // Закрытие модального окна
        closeBtn.addEventListener("click", () => {
            document.body.removeChild(modal);
        });

        modal.addEventListener("click", (event) => {
            if (event.target === modal) {
                document.body.removeChild(modal);
            }
        });




        $.ajax({
        type: 'GET',
        url: `/Personality/GetLocationList?guid=${document.getElementById('personGUID').value}`,
        success: function (data) {
            // Очищаем текущие опции
            $('#tt').empty();

            // Добавляем locationBind (с selected)
            data.item1.forEach(location => {
                let newOption = new Option(location.name, location.guid, true, true);
                $('#tt').append(newOption);
            });

            // Добавляем locationLeft (без selected)
            data.item2.forEach(location => {
                let newOption = new Option(location.name, location.guid, false, false);
                $('#tt').append(newOption);
            });

            // Обновляем select2
            $("#tt").trigger("change")
        }
     });


    }

    function removeModal() {
        document.body.removeChild(document.querySelector(".modal"));
    }

    // Изменение набора выделенных элементов в селекторе
    function SelectChange(selector) {
            // Определяем элементы
            var selId = '#' + $(selector).prop('id');
            var selCont = $(selector).parent();
            var save = $(selector).parent().parent().find('.save');
            var cancel = $(selector).parent().parent().find('.cancel');

            // Включаем кнопки
            $(save).removeClass('d-none');
            $(cancel).removeClass('d-none');
    }

    function SaveMoreTT() {

        var selectedLocations = $("#tt").val(); // Получаем GUID-ы выбранных локаций
        var personGuid = $("#personGUID").val(); // Получаем GUID личности

        const requestData = {
            Guid: personGuid,
            Locations: selectedLocations
        };

        $.ajax({
            url: "/Personality/SaveMoreTT",
            method: "POST",
            contentType: "application/json",
            data: JSON.stringify(requestData), // Отправляем JSON в теле запроса
            success: function (response) {
                console.log("Сохранено успешно", response);
            },
            error: function (xhr, status, error) {
                console.error("Ошибка сохранения", error);
            }
        });
    }


</script>

<script>
    // Проверка инпутов при вводе
    function checkOnlyRussianTextInput(e) {
        if (/[a-zA-Z0-9.,]/.test(e.target.value)) {
            e.target.value = e.target.value.replace(/[a-zA-Z0-9.,]/g, ''); // Удаляем латиницу
        }
    }

    function checkOnlyNumberInput(e) {
        if (/[а-яА-Яa-zA-Z.,]/.test(e.target.value)) {
            e.target.value = e.target.value.replace(/[а-яА-Яa-zA-Z.,]/g, '');
        }
    }

    $('#INNPerson').on('input', checkOnlyNumberInput);
    $('#tel').on('input', checkOnlyNumberInput);

    $('#surnamePerson').on('input', checkOnlyRussianTextInput);
    $('#namePerson').on('input', checkOnlyRussianTextInput);
    $('#patronymicPerson').on('input', checkOnlyRussianTextInput);

</script>