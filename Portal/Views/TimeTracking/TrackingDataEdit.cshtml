@model Portal.Models.TrackingDataEditModel

<div class="row" id="fordres_editor">
    <!--Группы-->
    <div class="col-sm-2">
        <table class="table">
            <tr class="bg-primary">
                <th class="text-left">Должность</th>
            </tr>
        </table>
        <div class="col-4 panel panel-default height table1" id='check' style="margin-bottom: 10px">
            <table class="table">
                @foreach (var item in Model.JobTitles)
                {
                    <tr class="getJobTitleData">
                        <td style="cursor: pointer;"><input type="checkbox" class="hidden"><label style="cursor: pointer;">@item.Name</label></td>
                        <td class="hidden TTForHeader">@Model.TTData.Location.Name</td>
                        <td class="hidden TTIdForHeader">@Model.TTData.Location.Guid</td>
                        <td class="hidden jobTitleId">@item.Guid</td>
                        <td class="hidden dateForHeader">@Model.TTData.DateDatas[0].Date.ToString("dd.MM.yyyy")</td>
                    </tr>
                }
            </table>
        </div>
        <div class="allPersonsDiv" id="allPersonsDiv">
            <table class="allPersonsTable">
                <tr class="allPerson getAllPersons" onclick="allPersons()" style="width: 100%;">
                    <td>Все сотрудники</td>
                </tr>
                <tr class="sortInput">
                    <td><input type="text" class="sortPersonInput hidden" placeholder="Введите ФИО"></td>
                </tr>
            </table>
        </div>
    </div>

    <!--Сотрудник-->
    <div class="col-sm-5">
        <table class="table">
            <tr class="bg-primary">
                <th class="text-left">Сотрудник</th>
                <th class="text-center">Должность</th>
            </tr>
        </table>
        <div class="col-4 panel panel-default height table1" style="margin-bottom: 10px">
            <table class="table table-for-an">
                @foreach (var item in Model.PersonalityVersions.OrderBy(g => g.Surname))
                {
                    <tr class="personList hidden">
                        <td class="hidden">@item.Personalities.Guid</td>
                        <td><input type="checkbox" class="hidden"><label class="namePersons">@item.Surname @item.Name @item.Patronymic</label></td>
                        <td>@item.JobTitle.Name</td>
                        <td class="hidden">@item.JobTitle.Guid</td>
                        <td class="hidden">@item.Location.Guid</td>
                        <td onclick="addRowPeron(this)"><label class="md-add-circle-outline ico" style="margin: 0;"></label> </td>
                        <td class="hidden">@item.Schedule.BeginTime</td>
                        <td class="hidden">@item.Schedule.EndTime</td>
                    </tr>
                }
            </table>
        </div>
    </div>

    <!--Заказ-->
    <div class="col-sm-5">
        <div class="col-4 panel panel-default height" style="margin-bottom: 10px">
            <table class="table">
                <tr class="bg-primary">
                    <th class="text-left">Сотрудник</th>
                    <th class="text-left">Должность</th>
                    <th class="text-left">Время</th>
                </tr>
            </table>

            <!--sku в заказе-->
            <div id="SkuInOrder" class="table1">
                <table class="table">
                    <tbody id="personItemsTable">
                        @if (Model.TTData.DateDatas[0].TimeSheets.Count() > 0)
                        {
                            @foreach (var item in Model.TTData.DateDatas[0].TimeSheets)
                            {
                                <tr>
                                    <th class="hidden guidForError">@item.Personalities.Guid</th>
                                    <th class="newRowAlign">@item.Personalities.Name</th>
                                    <th class="hidden">@item.JobTitle.Guid</th>
                                    <th class="newRowAlign">
                                        <select name="" id="selectJobTitle" class="selectJobTitle">
                                            @foreach (var job in Model.JobTitles)
                                            {
                                                if (job.Name == item.JobTitle.Name)
                                                {
                                                    <option value="@job.Guid" selected>@job.Name</option>
                                                }
                                                else
                                                {
                                                    <option value="@job.Guid">@job.Name</option>
                                                }
                                            }
                                        </select>
                                    </th>
                                    <th class="newRowAlign" style="width: fit-content;">
                                        <input type="time" value='@item.Begin.ToString("HH:mm")' class="timeBeginForJSON">
                                        <input type="time" value='@item.End.ToString("HH:mm")' class="timeEndForJSON">
                                    </th>

                                    <th class="newRowAlign" style="align-content: center;padding-right: 16px;"><label class="md-remove-circle-outline ico" style="margin: 0;" onclick='deletePersonRow(this)'></label></th>

                                </tr>
                            }

                            @foreach (var item in Model.TTData.DateDatas[0].WorkingSlots)
                            {
                                <tr style="background-color: rgb(242, 242, 242);">
                                    <th class="hidden idWorkingSlots guidForError">@item.Id</th>
                                    @if(@item.Personalities == null)
                                    {
                                        <th class="newRowAlign">Сотрудник с биржи</th>
                                    } else
                                    {
                                        <th class="newRowAlign">@item.Personalities?.Name</th>
                                    }

                                    <th class="hidden">@item.JobTitles.Guid</th>
                                    <th class="newRowAlign">

                                        @if(User.IsInRole("time_tracking_administrator"))
                                        {
                                            <select name="" id="selectJobTitle" class="selectJobTitle">
                                                @foreach (var job in Model.JobTitles)
                                                {
                                                    if (job.Name == item.JobTitles.Name)
                                                    {
                                                        <option value="@job.Guid" selected>@job.Name</option>
                                                    }
                                                    else
                                                    {
                                                        <option value="@job.Guid">@job.Name</option>
                                                    }
                                                }
                                            </select>
                                        } else if(item.Status == 0)
                                        {
                                            <select name="" id="selectJobTitle" class="selectJobTitle">
                                                @foreach (var job in Model.JobTitles)
                                                {
                                                    if (job.Name == item.JobTitles.Name)
                                                    {
                                                        <option value="@job.Guid" selected>@job.Name</option>
                                                    }
                                                    else
                                                    {
                                                        <option value="@job.Guid">@job.Name</option>
                                                    }
                                                }
                                            </select>
                                        }
                                        else
                                        {
                                            <select name="" id="selectJobTitle" class="selectJobTitle" disabled>
                                                @foreach (var job in Model.JobTitles)
                                                {
                                                    if (job.Name == item.JobTitles.Name)
                                                    {
                                                        <option value="@job.Guid" selected>@job.Name</option>
                                                    }
                                                    else
                                                    {
                                                        <option value="@job.Guid">@job.Name</option>
                                                    }
                                                }
                                            </select>
                                        }
                                    </th>
                                    <th class="newRowAlign" style="width: fit-content;">

                                        @if (User.IsInRole("time_tracking_administrator") || DateTime.Now > item.End)
                                        {
                                            <input type="time" value='@item.Begin.ToString("HH:mm")' class="timeBeginForJSON">
                                            <input type="time" value='@item.End.ToString("HH:mm")' class="timeEndForJSON">
                                        } else if(item.Status == 0)
                                        {
                                            <input type="time" value='@item.Begin.ToString("HH:mm")' min="@DateTime.Now.AddHours(1).ToString("HH:mm")" class="timeBeginForJSON">
                                            <input type="time" value='@item.End.ToString("HH:mm")' class="timeEndForJSON">
                                        } else
                                        {
                                             <input type="time" value='@item.Begin.ToString("HH:mm")' class="timeBeginForJSON" disabled>
                                            <input type="time" value='@item.End.ToString("HH:mm")' class="timeEndForJSON" disabled>
                                        }


                                    </th>

                                    @if(item.Status == 0)
                                    {
                                        <th class="newRowAlign" style="align-content: center;padding-right: 16px;"><label class="md-remove-circle-outline ico" style="margin: 0;" onclick='deletePersonRow(this)'></label></th>
                                    } else
                                    {
                                        <th class="newRowAlign">
                                        <div class="custom-select" id="selectMini">
                                            <div class="selected-option">

                                                @if (item.Status == 0)
                                                {
                                                    <img src="/pic/seach.png" id="0" alt="icon" />
                                                }
                                                else if (item.Status == 1)
                                                {
                                                    <img src="/pic/clock.png" id="1" alt="icon" />
                                                }
                                                else if (item.Status == 2)
                                                {
                                                    <img src="/pic/block.png" id="2" alt="icon" />
                                                }
                                                else if (item.Status == 3)
                                                {
                                                    <img src="/pic/close.png" id="3" alt="icon" />
                                                }
                                                else if (item.Status == 4)
                                                {
                                                    <img src="/pic/check.png" id="4" alt="icon" />
                                                }
                                                else if (item.Status == 5)
                                                {
                                                    <img src="/pic/ruble.png" id="5" alt="icon" />
                                                }
                                            </div>

                                            @if(User.IsInRole("time_tracking_administrator"))
                                            {
                                                <ul class="options-list">
                                                <li data-value="0">
                                                    <img src="/pic/seach.png" id="0" alt="icon" /> Сотрудник запрошен
                                                </li>
                                                <li data-value="1">
                                                    <img src="/pic/clock.png" id="1" alt="icon" /> Сотрудник назначен
                                                </li>
                                                <li data-value="2">
                                                    <img src="/pic/block.png" id="2" alt="icon" /> Смена отменена
                                                </li>
                                                <li data-value="3">
                                                    <img src="/pic/close.png" id="3" alt="icon" /> Не выполнена
                                                </li>
                                                <li data-value="4">
                                                    <img src="/pic/check.png" id="4" alt="icon" /> Выполнена
                                                </li>
                                                <li data-value="5">
                                                    <img src="/pic/ruble.png" id="5" alt="icon" /> Оплачена
                                                </li>
                                                </ul>
                                            } else if(item.Status == 1 && item.End <= DateTime.Now)
                                            {
                                                <ul class="options-list">

                                                     <li data-value="1">
                                                        <img src="/pic/clock.png" id="1" alt="icon" /> Сотрудник назначен
                                                    </li>
                                                
                                                    <li data-value="2">
                                                        <img src="/pic/block.png" id="2" alt="icon" /> Смена отменена
                                                    </li>

                                                     <li data-value="3">
                                                        <img src="/pic/close.png" id="3" alt="icon" /> Не выполнена
                                                    </li>

                                                    <li data-value="4">
                                                        <img src="/pic/check.png" id="4" alt="icon" /> Выполнена
                                                    </li>

                                                </ul>
                                            }
                                        </div>
                                    </th>
                                    }

                                    

                                </tr>
                            }

                        }
                    </tbody>
                </table>
            </div>
        </div>

        <!--Кнопки сохранить/отмена-->
        <div class="col-4 trackingData_buttons" style="height:40px">
            <button class="btn btn-gray" href="javascript:void(0)" type="button" onclick="addRowPeronFromExchange()" style="float:right">Запросить на бирже</button>
            <button class="btn btn-success" href="javascript:void(0)" type="button" onclick="sendData()" style="float:right">Сохранить</button>
        </div>
    </div>
</div>

<!-- Скрипт для заголовка -->
<script>
    // Обновляем заголовок с датой и названием
    let tt = document.querySelector('.TTForHeader').textContent;
    let date = document.querySelector('.dateForHeader').textContent;
    $('#header').text(date + '  ' + tt);

    // Убираем событие клика с кнопки "Назад" и определяем новое
    $('#back').unbind('click');
    $('#back').click(function () {
        $('#page').load('/TimeTracking/TrackingData');
    });

    // Обрабатываем кастомные селекты
    document.querySelectorAll('.custom-select').forEach(select => {
        // Обрабатываем клик по каждому селекту
        select.addEventListener('click', function (e) {

            const height = window.innerHeight; // Высота окна
            const y = event.clientY; // Координата Y

            console.log(select)

            if (height / 2 < y)
            {
                select.children[1].style = "top: auto; bottom: 100%"
            } else {
                select.children[1].style = "top: 100%; bottom: auto"
            }
            

            const elem = this;
            // Убираем класс active у всех остальных селектов
            document.querySelectorAll('.custom-select').forEach(x => {
                if (x !== elem) {
                    x.classList.remove("active");
                }
            });
            // Переключаем класс active для нажатого селекта
            this.classList.toggle('active');
        });

        // Обрабатываем каждый элемент списка внутри конкретного селекта
        select.querySelectorAll('.options-list li').forEach(item => {
            item.addEventListener('click', function (e) {
                e.stopPropagation(); // Предотвращаем всплытие события
                const selectedText = this.textContent; // Текст выбранного элемента
                const selectedIcon = this.querySelector('img').src; // Иконка выбранного элемента
                const selectedId = this.querySelector('img').id;

                // Обновляем иконку и текст в текущем выбранном селекте
                const selectedOption = select.querySelector('.selected-option img');
                selectedOption.src = selectedIcon; // Меняем иконку
                selectedOption.id = selectedId;
                select.querySelector('.selected-option').textContent = ''; // Очищаем текст
                select.querySelector('.selected-option').appendChild(selectedOption); // Добавляем иконку

                // Закрываем выпадающий список
                select.classList.remove('active');
            });
        });
    });
</script>

<script>
    // Функция для скрытия поля ввода
    function hideInput() {
        let inputSearch = document.querySelector('.sortPersonInput');
        if (!inputSearch.classList.contains('hidden')) {
            inputSearch.classList.add('hidden');
        }
    }

    // Функция для показа поля ввода
    function showInput() {
        let inputSearch = document.querySelector('.sortPersonInput');
        if (inputSearch.classList.contains('hidden')) {
            inputSearch.classList.remove('hidden');
        }
    }

    // Событие клика для получения данных о должности
    $(".getJobTitleData").click(function (event) {
        checkHeight();
        let getAllPersons = document.querySelector('.getAllPersons');
        let elem = this;
        let allJobTitle = document.querySelectorAll('.getJobTitleData');
        let allPerson = document.querySelectorAll('.personList');
        let jobTitle = this.children[3].textContent; // Должность
        let ttguid = this.children[2].textContent; // GUID

        // Если элемент активен, убираем активное состояние
        if (elem.classList.contains('active1')) {
            elem.classList.remove('active1');
            hideInput();
            getAllPersons.classList.remove('active2');
            allPerson.forEach((str) => {
                str.classList.add('hidden');
            });
        } else {
            // Деактивируем все должности и скрываем ввод
            getAllPersons.classList.remove('active2');
            hideInput();
            allJobTitle.forEach((str) => {
                str.classList.remove('active1');
            });
            allPerson.forEach((str) => {
                str.classList.add('hidden');
            });
            elem.classList.add('active1'); // Активируем текущий элемент
            allPerson.forEach((str) => {
                // Показываем людей, соответствующих выбранной должности и GUID
                if (str.children[3].textContent == jobTitle && str.children[4].textContent == ttguid) {
                    str.classList.remove('hidden');
                }
            });
        }
    });
</script>

<!-- Функция показа/скрытия всех сотрудников -->
<script>
    function allPersons() {
        let inputSearch = document.querySelector('.sortPersonInput');
        inputSearch.classList.toggle('hidden');
        let allJobTitle = document.querySelectorAll('.getJobTitleData');
        let allPerson = document.querySelectorAll('.personList');
        let getAllPersons = document.querySelector('.getAllPersons');

        if (getAllPersons.classList.contains('active2')) {
            hideInput();
            getAllPersons.classList.remove('active2');
            allPerson.forEach((str) => {
                str.classList.add('hidden');
            });
        } else {
            showInput();
            allJobTitle.forEach((str) => {
                str.classList.remove('active1');
            });
            getAllPersons.classList.add('active2');
            allPerson.forEach((str) => {
                str.classList.remove('hidden');
            });
        }
        checkHeight();
    }
</script>

<!-- Скрипт для добавления и управления строками в таблице -->
<script>
    // Функция для добавления новой строки с данными о сотруднике
    function addRowPeron(data) {
        // Создаем новую строку
        let newRow = document.createElement('tr');

        // Создаем ячейки для данных
        let guidNameCell = document.createElement('td');
        guidNameCell.classList.add('newRowAlign', 'hidden', 'guidForError');

        let nameCell = document.createElement('td');
        nameCell.classList.add('newRowAlign');

        let jobTitleIdCell = document.createElement('td');
        jobTitleIdCell.classList.add('newRowAlign', 'hidden');

        let jobTitleCell = document.createElement('td');
        jobTitleCell.classList.add('newRowAlign');

        let timeCell = document.createElement('td');
        timeCell.classList.add('newRowAlign');

        let deletePersonCell = document.createElement('td');
        deletePersonCell.classList.add('newRowAlign');

        // Извлекаем данные о сотруднике
        let guidName = data.parentElement.children[0].textContent;
        let name = data.parentElement.children[1].children[1].textContent;
        let guidJobTitle = data.parentElement.children[3].textContent;
        let jobTitleName = data.parentElement.children[2].textContent;
        let timeBegin = data.parentElement.children[6].textContent;
        let timeEnd = data.parentElement.children[7].textContent;

        // Заполняем ячейки данными
        guidNameCell.textContent = guidName;
        nameCell.textContent = name;
        jobTitleIdCell.textContent = guidJobTitle;
        timeCell.innerHTML = `<input type="time" value='${timeBegin}' class='timeBeginForJSON'>
                                  <input type="time" value='${timeEnd}' class='timeEndForJSON'>`;
        deletePersonCell.innerHTML = `<label class="md-remove-circle-outline ico" style="margin: 0;" onclick='deletePersonRow(this)'></label>`;

        // Добавляем ячейки в строку
        newRow.appendChild(guidNameCell);
        newRow.appendChild(nameCell);
        newRow.appendChild(jobTitleIdCell);
        newRow.appendChild(jobTitleCell);
        newRow.appendChild(timeCell);
        newRow.appendChild(deletePersonCell);

        // Добавляем строку в таблицу
        let table = document.getElementById('personItemsTable');
        table.appendChild(newRow);

        // Получаем данные о должностях
        const getJobTitleData = document.querySelectorAll('.getJobTitleData');
        const jobTitleList = [];
        const jobTitleIdList = [];
        getJobTitleData.forEach((jobTitle) => {
            jobTitleList.push(jobTitle.children[0].children[1].textContent);
            jobTitleIdList.push(jobTitle.children[3].textContent);
        });

        // Создаем селект для выбора должности
        let select = document.createElement('select');
        select.name = '';
        select.id = 'selectJobTitle';
        select.className = 'selectJobTitle';

        for (let i = 0; i < jobTitleList.length; i++) {
            let option = document.createElement('option');
            option.value = jobTitleIdList[i];
            option.text = jobTitleList[i];
            if (jobTitleList[i] === jobTitleName) {
                option.selected = true; // Выбираем должность по умолчанию
            }
            select.add(option);
        }

        jobTitleCell.appendChild(select); // Добавляем селект в ячейку должности

        checkHeight(); // Проверяем высоту таблицы
    }

    // Функция для добавления строки сотрудника из обмена
    function addRowPeronFromExchange() {
        // Создаем новую строку
        let newRow = document.createElement('tr');
        newRow.style = "background-color: rgb(242, 242, 242);"; // Устанавливаем цвет фона

        // Создаем ячейки для данных
        let guidNameCell = document.createElement('td');
        guidNameCell.classList.add('newRowAlign', 'hidden', 'idWorkingSlots', "guidForError");

        let nameCell = document.createElement('td');
        nameCell.classList.add('newRowAlign');

        let jobTitleIdCell = document.createElement('td');
        jobTitleIdCell.classList.add('newRowAlign', 'hidden');

        let jobTitleCell = document.createElement('td');
        jobTitleCell.classList.add('newRowAlign');

        let timeCell = document.createElement('td');
        timeCell.classList.add('newRowAlign');

        let deletePersonCell = document.createElement('td');
        deletePersonCell.classList.add('newRowAlign');

        // Устанавливаем данные по умолчанию
        let name = "Сотрудник с биржи";
        let jobTitleName = "Робот-создатель";

        // Заполняем ячейки данными

        guidNameCell.textContent = 0;
        nameCell.textContent = name;
        timeCell.innerHTML = `<input type="time" value='' class='timeBeginForJSON'>
                                  <input type="time" value='' class='timeEndForJSON'>`;
        deletePersonCell.innerHTML = `<label class="md-remove-circle-outline ico" style="margin: 0;" onclick='deletePersonRow(this)'></label>`;

        // Добавляем ячейки в строку
        newRow.appendChild(guidNameCell);
        newRow.appendChild(nameCell);
        newRow.appendChild(jobTitleIdCell);
        newRow.appendChild(jobTitleCell);
        newRow.appendChild(timeCell);
        newRow.appendChild(deletePersonCell);

        // Добавляем строку в таблицу
        let table = document.getElementById('personItemsTable');
        table.appendChild(newRow);

        // Получаем данные о должностях
        const getJobTitleData = document.querySelectorAll('.getJobTitleData');
        const jobTitleList = [];
        const jobTitleIdList = [];
        getJobTitleData.forEach((jobTitle) => {
            jobTitleList.push(jobTitle.children[0].children[1].textContent);
            jobTitleIdList.push(jobTitle.children[3].textContent);
        });

        // Создаем селект для выбора должности
        let select = document.createElement('select');
        select.name = '';
        select.id = 'selectJobTitle';
        select.className = 'selectJobTitle';

        for (let i = 0; i < jobTitleList.length; i++) {
            let option = document.createElement('option');
            option.value = jobTitleIdList[i];
            option.text = jobTitleList[i];
            if (jobTitleList[i] === jobTitleName) {
                option.selected = true; // Выбираем должность по умолчанию
            }
            select.add(option);
        }

        jobTitleCell.appendChild(select); // Добавляем селект в ячейку должности

        checkHeight(); // Проверяем высоту таблицы
    }

    // Функция для удаления строки с данными о сотруднике
    function deletePersonRow(str) {
        str.closest('tr').remove(); // Удаляем строку
        checkHeight(); // Проверяем высоту таблицы
    }

    // Функция для проверки высоты таблицы и добавления прокрутки, если необходимо
    function checkHeight() {
        let table3 = document.querySelectorAll('.table1');
        table3.forEach((fixTable) => {
            let table = fixTable.children[0];
            let tableHeight = fixTable.clientHeight;
            let helperHeight = table.clientHeight;
            let windowHeight = window.innerHeight;

            if (tableHeight > 0.69 * windowHeight) {
                fixTable.classList.add('scrollTable'); // Добавляем класс для прокрутки
            }
            if (helperHeight < 0.69 * windowHeight) {
                fixTable.classList.remove('scrollTable'); // Убираем класс для прокрутки
            }
        });
    }
    checkHeight(); // Начальная проверка высоты таблицы
</script>


<!-- Сортировка таблицы -->
<script>
    const sortPersonInput = document.querySelector('.sortPersonInput'); // Поле ввода для фильтрации имен
    const personList = document.querySelectorAll('.namePersons'); // Метки, содержащие имена

    sortPersonInput.addEventListener('input', (event) => {
        let filterValue = event.target.value.toLowerCase(); // Получаем значение фильтра в нижнем регистре
        let table = document.querySelector('.table-for-an'); // Находим таблицу
        let rows = table.getElementsByTagName('tr'); // Получаем все строки таблицы

        for (let i = 0; i < rows.length; i++) {
            let name = rows[i].getElementsByTagName('td')[1].children[1]; // Получаем имя из второй ячейки
            if (name) {
                let nameValue = name.textContent || name.innerText; // Получаем текст имени
                if (nameValue.toLowerCase().indexOf(filterValue) > -1) {
                    rows[i].classList.remove('hidden'); // Убираем скрытие, если имя совпадает
                } else {
                    rows[i].classList.add('hidden'); // Скрываем строку, если имя не совпадает
                }
            }
        }
    });
</script>

<!-- Отправка данных на сервер в формате JSON -->
<script>
    function sendData() {
        // Сбор данных
        const selectJobTitle = document.querySelectorAll('.selectJobTitle'); // Получаем все выбранные должности
        const Personalities = document.querySelectorAll('.guidForError'); // Получаем все личности
        const locationGuid = document.querySelector('.TTIdForHeader'); // Получаем местоположение
        const begin = document.querySelectorAll('.timeBeginForJSON'); // Получаем времена начала
        const end = document.querySelectorAll('.timeEndForJSON'); // Получаем времена окончания
        const date = document.querySelector('.dateForHeader').textContent.split('.').reverse().join('-') + ' ' + '00:00:00'; // Получаем дату
        const TimeSheetJson = []; // Массив для журнала времени
        const WorkSlotsJson = []; // Массив для рабочих слотов
        const sheduleData = {}; // Объект для данных расписания

        function editDate(date, days) {
            date = date + (60 * 60 * 24 * days * 1000); // Добавляем дни к дате
            date = new Date(date);
            let year = date.getFullYear();
            let month = ("0" + (date.getMonth() + 1)).slice(-2);
            let day = ("0" + date.getDate()).slice(-2);
            let result = year + "-" + month + "-" + day;
            return result; // Возвращаем отформатированную дату
        }

        for (let i = 0; i < selectJobTitle.length; i++) {
            let date1 = new Date();
            date1 = date1.setHours.apply(date1, begin[i].value.split(":")); // Устанавливаем часы начала
            let date2 = new Date();
            date2 = date2.setHours.apply(date2, end[i].value.split(":")); // Устанавливаем часы окончания
            let diff = date2 - date1; // Разница между временем начала и окончания
            let helperForTime = document.querySelector('.dateForHeader').textContent.split('.').reverse().join('-'); // Получаем дату для времени
            let beginTime; // Время начала
            let endTime; // Время окончания

            if (diff > 0) {
                endTime = helperForTime + ' ' + end[i].value; // Если время окончания больше, устанавливаем его
            } else {
                const dateString = document.querySelector('.dateForHeader').textContent;
                
                const dateParts = dateString.split('.');
                const dateObject = new Date(`${dateParts[2]}-${dateParts[1]}-${dateParts[0]}`);
                // Вычисляем следующую дату
                const milliseconds = dateObject.getTime();
                let totalEndDateWithoutHours = editDate(milliseconds, 1).split('.').reverse().join('-');
                endTime = totalEndDateWithoutHours + ' ' + end[i].value; // Устанавливаем время окончания на следующий день
            }

            beginTime = helperForTime + ' ' + begin[i].value; // Устанавливаем время начала

            if (Personalities[i].textContent == "0") {
                WorkSlotsJson.push({
                    Id: 0,
                    JobTitle: selectJobTitle[i].value,
                    Begin: beginTime,
                    End: endTime,
                    Status: 0,
                });
                continue; // Переходим к следующей итерации, если нет личности
            }
             
            if(Personalities[i].classList.contains('idWorkingSlots')){

                try {
                    WorkSlotsJson.push({
                        Id: Personalities[i].textContent,
                        JobTitle: selectJobTitle[i].value,
                        Begin: beginTime,
                        End: endTime,
                        Status: Personalities[i].parentElement.children[5].children[0].children[0].children[0].id,
                    });
                    continue; 
                } catch {
                    WorkSlotsJson.push({
                        Id: Personalities[i].textContent,
                        JobTitle: selectJobTitle[i].value,
                        Begin: beginTime,
                        End: endTime,
                        Status: 0,
                    });
                continue; 

                }


            }

            TimeSheetJson.push({
                Personalities: Personalities[i].textContent,
                JobTitle: selectJobTitle[i].value,
                Location: locationGuid.textContent,
                Begin: beginTime,
                End: endTime,
            });
        }

        sheduleData.WorkSlotsJson = WorkSlotsJson; // Добавляем рабочие слоты в данные расписания
        sheduleData.TimeSheetJson = TimeSheetJson; // Добавляем журнал времени в данные расписания
        sheduleData.Date = date; // Добавляем дату в данные расписания
        sheduleData.Location = locationGuid.textContent; // Добавляем местоположение в данные расписания

        const sheduleDataJSON = JSON.stringify(sheduleData); // Преобразуем данные в формат JSON
        $.ajax({
            type: "POST",
            url: '/TimeTracking/TimeTrackingAdd',
            data: { json: sheduleDataJSON }, // Отправляем данные на сервер
            datatype: "text",
            success: function (result) {
                if (result.ok) {
                    SpinnerShow(); // Показываем спиннер
                    $('#page').load('/TimeTracking/TrackingData', function () { SpinnerHide(); }); // Загружаем данные
                } else {
                    openModal('Ошибка', result); // Открываем модальное окно с ошибкой
                }
            },
            error: function (error) { openModal('Ошибка', error); } // Открываем модальное окно при ошибке
        });
    }
</script>
