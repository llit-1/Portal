@model Portal.Models.TrackingDataModel

<!--блок элементов над списком заказов-->
<div class="row headerTracking" style="margin-top: 10px; margin-bottom:10px">
    <!--фильтр ТТ-->
    <div class="headerTrackingItem">
        <select class="form-control form-control-sm" id="ttSelector" onchange="filters()">
            @if(@Model.TTDatas.Count() == 1)
            {
                <option id="0" > <b>Все точки</b> </option>
                foreach(var tt in Model.TTDatas)
                {
                    <option id="@tt.Location.Guid" selected> @tt.Location.Name </option>
                }
                @foreach (var tt in Model.Location.OrderBy(g => g.Name))
                {
                    <option id="@tt.Guid">@tt.Name</option>;
                }
            }
            else
            {
                <option id="0" selected> Все точки </option>
                @foreach (var tt in Model.Location.OrderBy(g => g.Name))
                {
                    <option id="@tt.Guid">@tt.Name</option>
                }
            }
        </select>
    </div>
    <div class="headerTracking__date">
        <div class="headerTrackingItem">
        @* Получаем дату, которую отправили или дефолтную (сегодня-сегодня)  *@
            <input type='date' class="calendarTracking form-control form-control-sm" id="calendarBegin" onchange="filters()" value='@Model.TTDatas[0].DateDatas[0].Date.ToString("yyyy-MM-dd")'>
        </div>
        <div class="headerTrackingItem">
            <input type='date' class="calendarTracking form-control form-control-sm" id="calendarEnd" onchange="filters()" value='@Model.TTDatas[0].DateDatas[^1].Date.ToString("yyyy-MM-dd")' >
        </div>
    </div>

    <div class="headerTrackingItem">
        <select class="form-control form-control-sm" id="intervalSelector" onchange="editCalendar()">

            <option id="0" selected disabled hidden> --- </option>
            <option id="1" >Сегодня</option>
            <option id="2" >7 дней</option>
            <option id="3" >15 дней</option>
            <option id="4" >30 дней</option>

        </select>
    </div>

    <button class="btn btn-default" onclick="swapToChart()">График</button>

</div>

<!--таблица заказов-->
<div class="panel panel-default" id="OrdersFranch">
    <div class="table-responsive">
        <table class="table" style="vertical-align: middle;" id="fOrdersTable" width='80%'>
            <tbody>
                    @{  
                        var tts = Model.TTDatas.OrderBy(g => g.Location.Name);
                    }
                    <!--точки-->
                    @foreach (var tt in tts)
                    {
                        <tr class="row-group-01" id="rowTracking mainTR_@tt.Location.Guid" style="vertical-align: middle;">
                            <td style="vertical-align: middle;" width=30% ><label><input class="hidden" type="checkbox" id="@tt.Location.Guid"><b>@tt.Location.Name</b></label></td>
                            <td style="vertical-align: middle;" id="tdcell" width=30%></td>
                            <td style="vertical-align: middle;" id="tdcell" width=10%></td>
                            <td style="vertical-align: middle;" id="tdcell" width=15%></td>
                            <td style="vertical-align: middle;" align="right" colspan="1" width=15%></td>
                        </tr>
                        <!--Даты-->
                        @foreach (var day in tt.DateDatas)
                        {   
                            var countPerson = (day.WorkingSlots.Count() + day.TimeSheets.Count()).ToString();

                            var totalPersons = day.TimeSheets.Count() + day.WorkingSlots.Count();

                            switch (totalPersons.ToString().Last())
                            {
                                case '1':
                                    {
                                        countPerson += " смена";
                                        break;
                                    }
                                case '2':
                                case '3':
                                case '4':
                                    {
                                        countPerson += " смены";
                                        break;
                                    }
                                default:
                                    {
                                        countPerson += " смен";
                                        break;
                                    }
                            }
                        <tr class="row-group-02 hidden day_@tt.Location.Guid">
                                
                            @{
                                string[] days = { "Воскресенье", "Понедельник", "Вторник", "Среда", "Четверг", "Пятница", "Суббота" };
                            }
                            
                            @if(days[(int)day.Date.DayOfWeek] == "Суббота" || days[(int)day.Date.DayOfWeek] == "Воскресенье")
                            {
                                <td width=30% style="vertical-align: middle;" align="left"><label style="color: red" id="IdForGetDate"><input class="hidden" type="checkbox" id='@day.Date.ToString("dd-MM-yyyy")_@tt.Location.Guid'>@day.Date.ToString("dd.MM.yyyy") - @days[(int)day.Date.DayOfWeek]</label></td>
                            } else {
                                <td width=30% style="vertical-align: middle;" align="left"><label id="IdForGetDate"><input class="hidden" type="checkbox" id='@day.Date.ToString("dd-MM-yyyy")_@tt.Location.Guid'>@day.Date.ToString("dd.MM.yyyy") - @days[(int)day.Date.DayOfWeek]</label></td>
                            }
                            
                            <td width=30% style="vertical-align: middle;" align="center"> @countPerson</td>
                            <td class="hidden @day.Date.ToString("dd-MM-yyyy")_@tt.Location.Guid">@tt.Location.Guid</td>
                            <td width=10% align="center" style="vertical-align: middle;" class="row-group-02-hours">

                                @using System.Globalization
                                @{
                                    // округляем до 2 знаков
                                    double hours = Math.Round((double)day.Hours, 2);

                                    // целая часть для правил склонения
                                    int hoursInt = (int)Math.Floor(hours);

                                    string stringHourse;
                                    if (hoursInt % 10 == 1 && hoursInt % 100 != 11)
                                    {
                                        stringHourse = " час";
                                    }
                                    else if ((hoursInt % 10 >= 2 && hoursInt % 10 <= 4) && !(hoursInt % 100 >= 12 && hoursInt % 100 <= 14))
                                    {
                                        stringHourse = " часа";
                                    }
                                    else
                                    {
                                        stringHourse = " часов";
                                    }

                                    // форматируем вывод с двумя знаками после дробной точки
                                    // используем InvariantCulture, если хочешь точку как разделитель; убери CultureInfo, если нужен локальный разделитель (запятая)
                                    string hoursStr = hours.ToString("F2", CultureInfo.InvariantCulture);
                                }

                                @hoursStr@stringHourse

                                </td>

                                <td width=15% style="vertical-align: middle;" align="right"><label id="getTableView" class="md-assessment ico ClassForGetDate trackTableView" onclick="loadTask(this, event)"></label></td>
                                <td width=15% style="vertical-align: middle;" align="center"><label class="md-edit ico ClassForGetDate" onclick="loadTracking(this)"></label></td>
                            </tr>
                            <!--Сотрудники-->
                            @foreach (var person in day.TimeSheets.OrderBy(g => g.Personalities.Name))
                            {
                                <tr class='row-group-03 hidden person_@day.Date.ToString("dd-MM-yyyy")_@tt.Location.Guid'>
                                    <td class="hidden">@person.Guid</td>
                                    <td style="vertical-align: middle;" align="left">@person.Personalities.Name</td>
                                    <td style="text-align:center; vertical-align: middle;" align="center">@person.JobTitle?.Name</td>
                                <td style="text-align:center; vertical-align: middle;" align="center">
                                    @{
                                        double totalHours = 0;

                                        TimeSpan duration = person.End - person.Begin;
                                        if (duration < TimeSpan.Zero)
                                        {
                                            duration = TimeSpan.FromHours(24) - person.Begin.TimeOfDay + person.End.TimeOfDay;
                                        }
                                        totalHours += duration.TotalHours;

                                        // Округляем до сотых
                                        totalHours = Math.Round(totalHours, 2);

                                        // Целая часть для склонения
                                        int hoursGInt = (int)Math.Floor(totalHours);

                                        string stringHourseTotalHours;
                                        if (hoursGInt % 10 == 1 && hoursGInt % 100 != 11)
                                        {
                                            stringHourseTotalHours = " час";
                                        }
                                        else if ((hoursGInt % 10 >= 2 && hoursGInt % 10 <= 4) && !(hoursGInt % 100 >= 12 && hoursGInt % 100 <= 14))
                                        {
                                            stringHourseTotalHours = " часа";
                                        }
                                        else
                                        {
                                            stringHourseTotalHours = " часов";
                                        }
                                    }

                                    @totalHours @stringHourseTotalHours

                                    </td>
                                    <td align="center"></td>
                                    <td class="hour_@tt.Location.Guid" align="right">@person.Begin.ToString("HH:mm") - @person.End.ToString("HH:mm") </td>
                                </tr>
                            }

                            @foreach (var person in day.WorkingSlots)
                            {
                                <tr class='row-group-03 hidden person_@day.Date.ToString("dd-MM-yyyy")_@tt.Location.Guid' style="background-color: rgb(255 247 181 / 66%);">
                                    <td class="hidden" id="@person.Status">@person.Id</td>
                                    @if(person.Personalities == null)
                                    {
                                        <td style="vertical-align: middle;" align="left">Сотрудник с биржи</td>
                                    } else
                                    {
                                        <td style="vertical-align: middle;" align="left">@person.Personalities?.Name</td>
                                    }

                                    <td style="text-align:center; vertical-align: middle;" align="center"></td>
                                    <td style="text-align:center; vertical-align: middle;" align="center">@person.JobTitles?.Name</td>
                                    <td style="text-align:center; vertical-align: middle;" align="center"></td>
                                    <td align="right">@person.Begin.ToString("HH:mm") - @person.End.ToString("HH:mm") </td>
                                </tr>
                            }
                    } 
                    }
            </tbody>
        </table>
    </div>
</div>

<script>
    const day_state = [];
    $('.row-group-01').click(function () {
        // clas
        var check = $(this).children('td').children('label').children('input');
        var items = '.day_' + $(check).attr('id');
        if (!$(check).is(':checked')) {
            $(check).prop('checked', true);
            $(items).removeClass('hidden');
            day_state.push(this.id)
        }
        else {
            let index = day_state.indexOf(this.id);
            if (index !== -1) {
                day_state.splice(index, 1);
            }
            $(items).each(function () {
                var check01 = $(this).children('td').children('label').children('input');
                var items01 = '.person_' + $(check01).attr('id');
                    
                    $(check01).prop('checked', false);
                    $(items01).addClass('hidden');
            });

            $(check).prop('checked', false);
            $(items).addClass('hidden');
        }
    });


    function loadTracking(str) {
        let days_state = JSON.stringify(day_state)

        localStorage.setItem('days_state', days_state)

        let date = str.parentElement.parentElement.children[0].children[0].textContent.split("-")[0].trim().replaceAll(".","-");
        let guid = str.parentElement.parentElement.children[2].textContent;

            p = '/TimeTracking/TrackingDataEdit?stringDate=' + date + '&locationGuid=' + guid
            $('#page').load(p);
            $('#loading').show();
    }

</script>

<!--группировка по дню-->
<script>
    $('.row-group-02').click(function () {
        var check = $(this).children('td').children('label').children('input');
        var items = '.person_' + $(check).attr('id');
        if (!$(check).is(':checked')) {
            $(check).prop('checked', true);
            $(items).removeClass('hidden');
        }
        else {
            $(check).prop('checked', false);
            $(items).addClass('hidden');
        }
    });
</script>

<!--мобильная версия-->
<script>
    var curOrient = '';

    // переключение по ориентации экрана
    function autoScreenLoad() {
        var width = $(window).width();
        var height = $(window).height();
        orient = width / height;

        if (orient > 1 & curOrient != 'horizontal') {
            curOrient = 'horizontal';
            $('.mobile-hide').show();
        }

        if (orient < 1 & curOrient != 'vertical') {
            curOrient = 'vertical';
            $('.mobile-hide').hide();
        }
    }

    $(window).resize(function () {
        autoScreenLoad();
    });
</script>

<!--селектор дат-->
<script>
    $('#dateSelector').on('change', function () {
        filters();
    });
</script>


<!--Изменение календаря через выбор промежутка-->
<script>
    const startBeginDate = document.getElementById('calendarBegin');
    const endBeginDate = document.getElementById('calendarEnd');

    function editCalendar() {
        let calendarBegin = document.getElementById("calendarBegin");
        let calendarEnd = document.getElementById("calendarEnd");
        calendarBegin.value = startBeginDate.value;
        calendarEnd.value = endBeginDate.value;
        const intervalSelector = document.getElementById('intervalSelector').value;

        let today = new Date();
 
        // получить сегодняшнюю дату в формате `MM/DD/YYYY`
        let now = today.toLocaleDateString('en-US');
        function editDate(days){
            let date = Date.now()
            date = date - (60 * 60 * 24 * days * 1000);
            date = new Date(date)
            let year = date.getFullYear();
            let month = ("0" + (date.getMonth() + 1)).slice(-2);
            let day = ("0" + date.getDate()).slice(-2);
            let result = year + "-" + month + "-" + day;
            return result;
        }
        if(intervalSelector === '7 дней'){
            calendarBegin.value = editDate(7)
            calendarEnd.value = editDate(0)
        }
        else if(intervalSelector === '15 дней'){
            calendarBegin.value = editDate(15)
            calendarEnd.value = editDate(0)
        }
        else if(intervalSelector === '30 дней'){
            calendarBegin.value = editDate(30)
            calendarEnd.value = editDate(0)
        }
        else if(intervalSelector === 'Сегодня'){
            calendarBegin.value = editDate(0)
            calendarEnd.value = editDate(0)
        }
        filters()
    }
</script>

<!--фильтры-->
<script>
    function filters() {
            let ttVal = $("option:selected", '#ttSelector').attr('id');
            const ttSelector = document.getElementById('ttSelector');
            const calendarBegin = document.getElementById("calendarBegin").value;
            const calendarEnd = document.getElementById("calendarEnd").value;
            let selectedOption = ttSelector.options[ttSelector.selectedIndex];
            let selectedOptionId = selectedOption.getAttribute("id");
            localStorage.setItem("calendarBegin", calendarBegin);
            localStorage.setItem("calendarEnd", calendarEnd);
            localStorage.setItem("selectedOptionId", selectedOptionId);
            $('#loading').show();
            $('#page').load('/TimeTracking/TrackingdataTable?begin=' + calendarBegin + '&end=' + calendarEnd + '&locationguid=' + selectedOptionId);
    }
    
    if (localStorage.getItem('days_state') != null){
        let state = localStorage.getItem('days_state')
        let arr_state = JSON.parse(state);
        arr_state.forEach(elem => {
            document.getElementById(elem).click()
        })
    }
</script>

<!--по загрузке страницы-->
<script>
    $(document).ready(function () {
        autoScreenLoad();
        $('#loading').hide();  
    });
</script>

<script>
    if(window.innerWidth < 1130) {
            document.querySelectorAll('.trackTableView').forEach(elem => elem.classList.add('hidden'))
        } else {
            document.querySelectorAll('.trackTableView').forEach(elem => elem.classList.remove('hidden'))
    }

    window.addEventListener('resize', () => {
        if(window.innerWidth < 1130) {
            document.querySelectorAll('.trackTableView').forEach(elem => elem.classList.add('hidden'))
        } else {
            document.querySelectorAll('.trackTableView').forEach(elem => elem.classList.remove('hidden'))
        }
    })

    function loadTask(item, event) {
        event.stopPropagation();
        event.preventDefault();
        // Собираем информацию по выбранному дню
        const guid = item.parentElement.parentElement.children[0].children[0].children[0].id;
        const guidDay = ".person_" + guid;
        const listPerson = document.querySelectorAll(guidDay);
        const personArr = [];
        listPerson.forEach(person => {
            const obj = {};
            obj.status = person.children[0].id.trim();
            obj.name = person.children[1].textContent.trim();
            obj.jobTitle = person.children[2].textContent.trim();
            obj.time = person.children[5].textContent.trim();
            personArr.push(obj)
        })
    
        // Создаем элемент modalWindowTracking
        const modalWindowTracking = document.createElement('div');
        modalWindowTracking.id = 'modalWindowTracking';
        modalWindowTracking.classList.add('modalWindowTracking');

        // Создаем элемент centerMainTable
        const centerMainTable = document.createElement('div');
        centerMainTable.classList.add('centerMainTable');

        // Создаем элемент mainTabel
        let mainTabel = document.createElement('div');
        mainTabel.classList.add('antiPropagation');
        mainTabel.id = 'mainTabel';

        // Добавляем mainTabel в centerMainTable
        centerMainTable.appendChild(mainTabel);

        // Добавляем centerMainTable в modalWindowTracking
        modalWindowTracking.appendChild(centerMainTable);

        // Добавляем modalWindowTracking в контейнер
        document.getElementById('global').appendChild(modalWindowTracking);
        
        mainTabel = document.getElementById('mainTabel');
        
        if (personArr.length) {
            const ddTabel = document.createElement('div');
            ddTabel.classList.add('days');
            ddTabel.classList.add('antiPropagation');
            mainTabel.appendChild(ddTabel);

            for (let i = 0; i < personArr.length; i++) {
                let tableindex = document.createElement('div');
                tableindex.classList.add(`tabel_${i}`);
                tableindex.classList.add('antiPropagation');
                tableindex.classList.add('tabel');
                
                let tablenameindex = document.createElement('div');
                tablenameindex.classList.add(`name_${i}`);
                tablenameindex.classList.add('name');
                tablenameindex.classList.add('antiPropagation');
                tablenameindex.textContent = personArr[i].name;

                let tabletimeindex = document.createElement('div');
                tabletimeindex.classList.add(`time_${i}`);
                tabletimeindex.classList.add(`time`);
                tabletimeindex.classList.add('antiPropagation');
                
                tableindex.appendChild(tablenameindex);
                tableindex.appendChild(tabletimeindex);

                mainTabel.appendChild(tableindex);
            }

            const daysBlock = document.querySelector('.days');
            
            for (let i = 0; i <= 23; i++) {
                daysBlock.innerHTML += `<div id='hour_${i}' class='day antiPropagation'>${i}</div>`
            }

            let maxWidth = document.querySelector('.days').clientWidth;

            let widthText = 250;
            let totalWidth = maxWidth - widthText;
            let widthForEachHour = totalWidth / 23;
            let widthForEachMinute = widthForEachHour / 60;
            document.querySelectorAll('.day').forEach(x => x.style.width = `${widthForEachHour}px`)

            function sharp(time, widthForEachHour) {
                for (let i = 0; i <= 24; i++) {
                    document.querySelector('.days').innerHTML += `<span class='verticalLine antiPropagation'></span>`;
                    time.innerHTML += `<span class='verticalLine antiPropagation'></span>`
                }
                const line = document.querySelectorAll('.verticalLine');
                let count = 0;
                line.forEach((x) => {
                    if (count > widthForEachHour * 24) {
                        count = 0
                    }
                    x.style.paddingLeft = `${count}px`;
                    count += widthForEachHour;
                })
            }

            for (let i = 0; i < personArr.length; i++) {
                let fullTime = personArr[i].time;
                //Получаем стартовый час
                let startTimeHours = +(fullTime.split(' ')[0].split(':')[0]);
                //Получаем стартовую минуту
                let startTimeMinutes = +(fullTime.split(' ')[0].split(':')[1]);
                //Получаем конечный час
                let endTimeHours = +(fullTime.split(' ')[2].split(':')[0]);

                //Получаем конечную минуту
                let endTimeMinutes = +(fullTime.split(' ')[2].split(':')[1]);


                if (endTimeHours == 0) {
                    endTimeHours = 24

                    if(endTimeMinutes != 0)
                    {
                        endTimeHours = 25
                        endTimeMinutes = 0
                    }
                }
                if (endTimeHours < startTimeHours && endTimeHours > 0) {
                    endTimeHours = 25
                    endTimeMinutes = 0;
                }
                

                let time = document.querySelector(`.time_${i}`);

                if(personArr[i].status === "")
                {
                    time.innerHTML = `
                    <div class='lineTime antiPropagation ' style="z-index: ${i+3}">
                        <b class='antiPropagation'>${personArr[i].jobTitle}</b>
                    </div>`
                } else {
                     time.innerHTML = `
                    <div class='lineTime antiPropagation lineTimeExchange' style="z-index: ${i+3}">
                        <b class='antiPropagation'>${personArr[i].jobTitle}</b>
                    </div>`
                }

                let timeLine = document.querySelectorAll('.lineTime');
                
                // Отступ полоски времени
                let timeWidth = startTimeHours * widthForEachHour;
                // Определяем отступ с учетом минут
                timeWidth = timeWidth + (startTimeMinutes * widthForEachMinute);
                // Ширина полоски времени
                let widthWithHours = ((endTimeHours * widthForEachHour) - (startTimeHours * widthForEachHour)) - (startTimeMinutes * widthForEachMinute) + (endTimeMinutes * widthForEachMinute);
                timeLine[i].style.marginLeft = `${timeWidth}px`;
                timeLine[i].style.width = `${widthWithHours}px`;
                sharp(time, widthForEachHour)
                }
        } else {
            mainTabel.innerHTML += `<bold class='antiPropagation'>Нет смен для отображения</bold>`
            mainTabel.style.border = 'none';
        }
        document.getElementById('modalWindowTracking').addEventListener('click', e => {
            e.preventDefault();
            e.stopPropagation();
            document.getElementById('modalWindowTracking').remove();
        })

        document.querySelectorAll('.antiPropagation').forEach(elem => {
            elem.addEventListener('click', e => {
                e.stopPropagation();
                e.preventDefault();
            })
        })

    }

</script>