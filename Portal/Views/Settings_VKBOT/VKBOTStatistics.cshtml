@model List<System.Linq.IGrouping<string, Portal.Models.MSSQL.ReceivedPromocodesVK>>
@{
    Layout = null;
}

<div class="vk_statistics_wrapper">

    <div class="vk_statistics_buttons">
        @{
            var buttons = new[]
            {
                new { Value = 0, Text = "–°–µ–≥–æ–¥–Ω—è" },
                new { Value = 1, Text = "–í—á–µ—Ä–∞" },
                new { Value = 7, Text = "7 –¥–Ω–µ–π" },
                new { Value = 30, Text = "30 –¥–Ω–µ–π" },
                new { Value = 90, Text = "90 –¥–Ω–µ–π" }
            };

            foreach (var btn in buttons)
            {
                <button class="@(ViewBag.Days == btn.Value ? "active" : "")" value="@btn.Value">@btn.Text</button>
            }
        }
    </div>

    <div class="info-panel_wrapper">
        <div class="info-panel">
            <div style="display: flex; justify-content: space-between; align-items: center;"><strong>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π:</strong> <p style="margin: 0px">@Model.Sum(g => g.Count())</p></div>
            <div class="info-panel_stats">
                @foreach (var item in Model.OrderByDescending(x => x.Count()))
                {
                    <div><strong>@item.First().PromocodesVK.CodeWord:</strong> @item.Count()</div>
                }
            </div>
        </div>

        <div class="vk_statistics">

            <div class="chart-container" style="width: 800px; height: 600px;">
                <canvas id="promoChart"></canvas>
            </div>

        </div>
    </div>
    
</div>

    

    <script>

    const chartData = [
        @foreach (var group in Model)
        {
            <text>
                    {
                        name: '@Html.Raw(group.Key)',
                        codeWord: '@Html.Raw(group.First().PromocodesVK?.CodeWord)',
                        count: @group.Count(),
                        lastDate: '@group.Max(x => x.Date).ToString("yyyy-MM-ddTHH:mm:ss")'
                    },
            </text>
        }
    ];

    // 2. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    const labels = chartData.map(item => item.codeWord || item.name);
    const counts = chartData.map(item => item.count);

    const optimizeCounts = counts.map(elem => {

        if (elem >= 100) return 100;
        if (elem <= 10) return 10;
        return elem;
    });


        const testConfig = {
        type: 'polarArea',
            data: {
        labels: labels,
        datasets: [{
            data: optimizeCounts,
            backgroundColor: [
                '#FF6384',  // –†–æ–∑–æ–≤—ã–π
                '#36A2EB',  // –ì–æ–ª—É–±–æ–π
                '#FFCE56',  // –ñ—ë–ª—Ç—ã–π
                '#4BC0C0',  // –ë–∏—Ä—é–∑–æ–≤—ã–π (–∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–π –∞–∫—Ü–µ–Ω—Ç)
                '#9966FF',  // –õ–∞–≤–∞–Ω–¥–æ–≤—ã–π (–º—è–≥–∫–∏–π —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π)
                '#FF9F40',  // –û—Ä–∞–Ω–∂–µ–≤—ã–π (—Ç—ë–ø–ª—ã–π —Ç–æ–Ω)
                '#8AC249',   // –°–æ—á–Ω—ã–π –∑–µ–ª—ë–Ω—ã–π (–¥–ª—è –±–∞–ª–∞–Ω—Å–∞)
                '#FF6B6B',  // –¢—ë–ø–ª—ã–π –∫–æ—Ä–∞–ª–ª–æ–≤—ã–π üå∏
                '#6B5B95',  // –°–ª–∏–≤–æ–≤–æ-—Å–∏–Ω–∏–π ü´ê (–≥–ª—É–±–æ–∫–∏–π)
                '#A0E7E5',  // –ú—è—Ç–Ω—ã–π –ª–µ–¥–µ–Ω–µ—Ü üçÉ (–ø–∞—Å—Ç–µ–ª—å–Ω—ã–π)
                '#FFA07A',  // –°–≤–µ—Ç–ª–æ-–ª–æ—Å–æ—Å–µ–≤—ã–π üç£ (–Ω–µ–∂–Ω—ã–π)
                '#9370DB',  // –°—Ä–µ–¥–Ω–∏–π —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π üíú
                '#3CB371'
            ],
            borderWidth: 1,
            originalData: counts
        }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    position: 'top',
                },
                tooltip: {
                    callbacks: {
                    label: function(context) {
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ originalData
                        const originalValue = context.dataset.originalData[context.dataIndex];
                        return [
                            `–ê–∫—Ç–∏–≤–∞—Ü–∏–π: ${originalValue}`
                        ];
                    }
                }
                }
            },
            scales: {
                r: {
                    pointLabels: {
                        display: true,
                        centerPointLabels: true,
                        font: {
                            size: 14
                        }
                    },
                    ticks: {
                        display: false,
                    }
                }
            }
        }
    };
    new Chart(document.getElementById('promoChart'), testConfig);
</script>

<script>
    document.querySelectorAll(".vk_statistics_buttons > button").forEach(x => x.addEventListener("click", () => {
        document.querySelectorAll(".vk_statistics_buttons > button").forEach(y => y.classList.remove("active"))
        x.classList.add("active")
        $('#container-fluid').load('/Settings_VKBOT/VKBOTStatistics?days=' + x.value)
    }))
</script>
