@model List<Portal.Models.MSSQL.Location.Location>

<div class="transfer">

    <div class="transfer_details">

        <div class="details_card">
            <div class="card_title" style="min-height: 32.67px;"> Трансфер </div>
            <p class="transfer_position" id="transfer_start">Начальная точка:</p>
            <p class="transfer_position" id="transfer_end">Конечная точка:</p>
            <div class="card_search_wrapper">
                <img src="/themes/clearmin/img/search.png">
                <input class="card_search" placeholder="Поиск..."/>
            </div>
            
            
            <div class="location_handler">

                @foreach(var item in Model)
                {
                    <div class="location_item">
                        <p style="margin: 0;">@item.Name</p>
                        <div class="item_button_handler">
                            <button id="transferFrom" class="btn btn-default md-call-made" onclick="pickTransferPoint('@item.Name', 'start', this, '@item.Guid')"></button>
                            <button id="transferTo" class="btn btn-default md-call-received" onclick="pickTransferPoint('@item.Name', 'end', this, '@item.Guid')"></button>
                        </div>
                    </div>
                }

            </div>


        </div>

        <div class="details_card card_scan" style="width: 50%;">

            <div class="owner_object hand_scan">
                <div class="card_title newOwner"> Новый держатель </div>
                <div class="scan_add">
                    <input id="newowner" style="width: 100%; text-align: center;" class="scan_add_input" placeholder=""/>
                </div>
            </div>


            <div class="comments_wrapper hand_scan">
                <div class="card_title"> Комментарий </div>
                <textarea placeholder="Введите текст комментария" class="comments_area"></textarea>
            </div>
            
        </div>

        <div class="details_card card_scan" style="width: 60%;">

            <div class="hand_scan">
                <div class="card_title"> Ручное добавление </div>
                <div class="scan_add">
                    <input oninput="document.getElementById('scan_add').disabled = this.value.length !== 24"
                           class="scan_add_input"
                           id="scan_add_input"
                           maxlength="24"
                           placeholder="000000000000000000000000" />
                    <button id="scan_add"
                            class="scan_add_button btn btn-sm btn-success"
                            disabled
                            onclick="addNewRaw(document.querySelector('#scan_add_input').value)">
                        Добавить
                    </button>
                </div>
            </div>

            <div class="auto_scan">
                <div class="card_title"> Сканирование </div>
                <div class="auto_scan_wrapper">
                    <span>1. Нажмите на кнопку</span>
                    <span>2. Поднесите метку к считывателю</span>
                    <button class="scan_button md-play-arrow" onclick="toggleRecord(event, this)"></button>
                </div>
                
            </div>


        </div>

    </div>

    <div class="transfer_objects">
        <div class="panel panel-default" style="margin-bottom:0px; border: none; box-shadow: none;">
            <div class="panel-body">
                <div class="row mb-4 mt-3" style="margin-left: 0px;">
                    <div class="col-12">
                        <div class="card">
                            <div class="card-body">
                                <table class="data-table nowrap" style="width: 100%; border-spacing: 0 10px;">
                                    <thead>
                                        <tr>
                                            <th>ID</th>
                                            <th>Наименование</th>
                                            <th>Начальная точка</th>
                                            <th>Конечная точка</th>
                                            <th style="width: 25%">Комментарий</th>
                                            <th>Новый держатель</th>
                                            <th>Заполнил</th>
                                        </tr>
                                    </thead>
                                    <tbody id="transfer_table"></tbody>
                                </table>                            
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="transfer_buttons">
        <button class="transfer_button button_clear" onclick="clearAllFields()">Очистить</button>
        <button class="transfer_button btn btn-sm btn-success" onclick="SendStockTransferDataToAPI()">Отправить</button>
    </div>

</div>

<script>

    const state = {
        scannedCodes: new Set(),
        currentCode: '',
        transfer_start: null,
        transfer_start_guid: null,
        transfer_end: null,
        transfer_end_guid: null,
    };

    function pickTransferPoint(location, action, element, guid) {
        if(action === "start") {
            state.transfer_start = location
            state.transfer_start_guid = guid
            document.getElementById("transfer_start").innerText = `Начальная точка: ${location}`
            document.querySelectorAll("#transferFrom").forEach(x => x.disabled = false)
        } else {
            state.transfer_end = location
            state.transfer_end_guid = guid
            document.getElementById("transfer_end").innerText = `Конечная точка: ${location}`
            document.querySelectorAll("#transferTo").forEach(x => x.disabled = false)
        }

        element.disabled = true;
    }
    
    function toggleRecord(event, element) {
        event.preventDefault(); // Предотвращаем стандартное поведение
        event.stopPropagation(); // Останавливаем всплытие
        
        if(element.classList.contains('md-play-arrow')) {
            // Запуск сканирования
            element.classList.replace("md-play-arrow", "md-stop");
            element.blur(); // Убираем фокус с кнопки
            
            // Добавляем обработчик на window
            window.addEventListener('keydown', handleKeyDown);
        } else {
            // Остановка сканирования
            element.classList.replace("md-stop", "md-play-arrow");
            
            // Удаляем обработчик
            window.removeEventListener('keydown', handleKeyDown);

            element.blur(); // Убираем фокус с кнопки
        }
    }

    /// Модифицированный обработчик
    function handleKeyDown(e) {
        // Предотвращаем действие по умолчанию для всех клавиш
        e.preventDefault();
        
        // RFID-метки обычно заканчиваются Enter
        if (e.key === 'Enter') {

            if (state.currentCode.length === 24) {
                if(!state.scannedCodes.has(state.currentCode))
                {
                    addNewRaw(state.currentCode)
                }
                state.scannedCodes.add(state.currentCode);
            }
            state.currentCode = '';
        } 
        // Игнорируем служебные клавиши
        else if (e.key.length === 1 && /[0-9a-zA-Z]/.test(e.key)) {
            state.currentCode += e.key;
        }
    }

    const searchInput = document.querySelector('.card_search');
    const locationItems = document.querySelectorAll('.location_item');

    searchInput.addEventListener('input', function() {
        const searchTerm = this.value.toLowerCase(); // Получаем введённый текст в нижнем регистре

        locationItems.forEach(item => {
            const itemName = item.querySelector('p').textContent.toLowerCase(); // Берём текст из <p>
            
            if (itemName.includes(searchTerm)) {
                item.style.display = 'flex'; // Показываем, если совпадение
            } else {
                item.style.display = 'none'; // Скрываем, если нет совпадения
            }
        });
    });

    async function getObjectFromApi(id) {
        try {
            const response = await fetch(`https://warehouseapi.ludilove.ru/api/objects/getObject?id=${id}`);

            if (!response.ok) {
                throw new Error(`HTTP Error: ${response.status}`);
            }

            const result = await response.json();
            return result; // Return the parsed data
        } catch (error) {
            console.error("Fetch error:", error);
            throw error; // Re-throw to handle it in the calling function
        }
    }


    async function addNewRaw(id) {
        const table = document.getElementById("transfer_table")
        const comments = document.querySelector(".comments_area")
        const owner = document.getElementById("newowner")

        if(state.scannedCodes.has(id))
        {
            return null;
        } else {
            state.scannedCodes.add(id)
        }

        const result = await getObjectFromApi(id)

        table.innerHTML += `<tr class="activeRow itemTransferObject" onclick="">
                                <td>
                                    <p class="text-mute itemTransferObjectID">${id}</p>
                                </td>
                                <td>
                                    <p class="text-muted">${result.warehouseCategories.name}</p>
                                </td>
                                <td>
                                    <p class="text-muted">${state.transfer_start}</p>
                                </td>
                                <td>
                                    <p class="text-muted">${state.transfer_end}</p>
                                </td>
                                <td >
                                    <p class="text-muted"><input class='inputForComment' value='${comments.value}' /></p>
                                </td>
                                 <td>
                                    <p class="text-muted itemTransferObjectNewOwner">${newowner.value}</p>
                                </td>
                                <td>
                                    <p class="text-muted">@User.Identity.Name.ToString()</p>
                                </td>
                            </tr>`
    }


    async function SendStockTransferDataToAPI() {

        const finalArr = []

        document.querySelectorAll('.itemTransferObject').forEach(x => {
            const tempObj = {}
            tempObj.WarehouseObjectsId = x.querySelector(".itemTransferObjectID").textContent;
            tempObj.User = '@Html.Raw(User.Identity.Name)';
            tempObj.NewOwner = x.querySelector(".itemTransferObjectNewOwner").textContent;
            tempObj.LocationStart = state.transfer_start_guid;
            tempObj.LocationEnd =state.transfer_end_guid;
            tempObj.DateTime = '@DateTime.Now.ToString("yyyy-MM-ddThh:mm:ss")'
            tempObj.Comment = x.querySelector(".inputForComment").value;
            tempObj.WarehouseAction = 2;

            finalArr.push(tempObj)
        })

        try {
            const response = await fetch('https://warehouseapi.ludilove.ru/api/transfer/SetObjectHistory', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(finalArr)
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();
            console.log('Success:', data);
            return data;
        } catch (error) {
            console.error('Error:', error);
            throw error;
        }
    }

    function clearAllFields() {

        document.querySelectorAll('.itemTransferObject').forEach(x => x.remove())
        document.getElementById('scan_add_input').value = ""
        document.getElementById('newowner').value = ""
        document.querySelector('.comments_area').value = ""

        document.querySelectorAll('#transferFrom').forEach(x => x.disabled = false)
        document.querySelectorAll('#transferTo').forEach(x => x.disabled = false)
        
        document.getElementById('transfer_start').textContent = "Начальная точка:"
        document.getElementById('transfer_end').textContent = "Конечная точка:"

        state.scannedCodes = new Set()
        state.currentCode = ''
        state.transfer_start = null
        state.transfer_start_guid = null
        state.transfer_end = null
        state.transfer_end_guid = null
    }

</script>