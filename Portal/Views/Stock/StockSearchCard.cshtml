@model string

@{
    var rights = false;
    if (User.IsInRole("warehouse_admin"))
    {
        rights = true;
    }
}

<div class="search_page_wrapper">
    <div class="search_card_wrapper">
        <div class="search_wrapper">
            <img src="/themes/clearmin/img/search.png">
            @if(Model != null) {
                <input oninput="checkError()" id="input_search" class="search_card" value="@Model" placeholder="000000000000000000000000" maxlength="24"/>
            } else {
                <input oninput="checkError()" id="input_search" class="search_card" value="" placeholder="000000000000000000000000" maxlength="24"/>
            }
            
        </div>

        <button class="btn btn-default btn_search" id="search_card" onclick="search()">Поиск</button>
        <button class="btn btn-default btn_scan" id="card_scan" onclick="toggleRecord(event, this)">Сканировать</button>
    </div>

    <div class="card_details" id="card_details"></div>
</div>


<div class="stockSearchCard_modal" style="display: none">
    <div class="stockSearchCard_modal_body">
        <div class="stockSearchCard_modal_header">Внимание</div>
        <div class="stockSearchCard_modal_message">Вы уверены, что хотите списать предмет?</div>
        <div class="stockSearchCard_model_button">
            <button onclick="writeOffItem('@User.Identity.Name')" class="btn btn-danger">Списать</button>
            <button onclick="closeModal()" class="btn btn-default">Нет</button>
        </div>
    </div>
</div>


<script>
    const search_page_wrapper = document.querySelector(".search_page_wrapper")
    search_page_wrapper.addEventListener("keydown", (e) => {
        if (e.key === 'Enter') {
            search();
        }
    })

    const modal = document.querySelector('.stockSearchCard_modal');
    const modal_body = document.querySelector('.stockSearchCard_modal_body'); 
    const modal_message = document.querySelector('.stockSearchCard_modal_message');
    const modal_header = document.querySelector('.stockSearchCard_modal_header');

    function closeModal() {
        modal.style.display = "none";
    }

    modal.addEventListener('click', (e) => {
        if (!modal_body.contains(e.target)) {
            closeModal();
        }
    })

    function openModalStockSearchCard(header, message) {
        modal.style.display = "block";
    }

    const btn_search = document.getElementById("search_card");
    const card_details = document.getElementById("card_details")
    const input_search = document.getElementById("input_search")
    const search_wrapper = document.querySelector('.search_wrapper')

    function toggleRecord(event, element) {
        event.preventDefault();
        event.stopPropagation();

        if(element.innerText === "СКАНИРОВАТЬ") {

            element.innerText = "ОСТАНОВИТЬ"
            element.blur(); // Убираем фокус с кнопки
            
            // Добавляем обработчик на window
            window.addEventListener('keydown', handleKeyDown);
        } else {

            element.innerText = "СКАНИРОВАТЬ"
            
            // Удаляем обработчик
            window.removeEventListener('keydown', handleKeyDown);

            element.blur(); // Убираем фокус с кнопки
        }
    }

    const state = {
        currentCode: '',
    };

    /// Модифицированный обработчик
    async function handleKeyDown(e) {
        // Предотвращаем действие по умолчанию для всех клавиш
        e.preventDefault();
        
        // RFID-метки обычно заканчиваются Enter
        if (e.key === 'Enter') {

            if (state.currentCode.length === 24) {
                input_search.value = state.currentCode.replaceAll("Ф","A").replaceAll("И","B").replaceAll("С","C").replaceAll("В","D").replaceAll("У","E").replaceAll("А","F");
                await search(state.currentCode)
                document.getElementById("card_scan").innerText = "СКАНИРОВАТЬ"
                window.removeEventListener('keydown', handleKeyDown);
            }
            state.currentCode = '';
        } 
        // Игнорируем служебные клавиши
        else if (e.key.length === 1 && /[0-9a-zA-Zа-яА-ЯёЁ]/.test(e.key)) {
            state.currentCode += e.key;
        }
    }

    async function search(code = null) {

        if(!code){
            code = input_search.value;
        }

        // if(code.length !== 24)
        // {
        //     return search_wrapper.classList.add("search_wrapper--error")
        // }

        code.toString().padStart(24, "0")

        input_search.value = input_search.value.padStart(24, "0")

        const data = await getData(input_search.value);

        if(!data.length) {
            return search_wrapper.classList.add("search_wrapper--error")
        }

        checkError()

        buildInterface(data, input_search.value)

        card_details.style = "animation: showDetails 2s forwards;"
    }

    async function getData(id) {
        try {
            const response = await fetch('https://warehouseapi.ludilove.ru/api/transfer/GetObjectHistory?id=' + id, {
              method: 'GET',
              headers: {
                    'Authorization': `Bearer ${localStorage.getItem("token")}`
                }
            })

            return await response.json()
        } catch(e) {
            console.log(e.message)
            return search_wrapper.classList.add("search_wrapper--error")
        }
    }

    function checkError() {
        if(search_wrapper.classList.contains("search_wrapper--error")) {
            search_wrapper.classList.remove("search_wrapper--error")
        }
    }

    async function getCategory(id) {
        try {
                const response = await fetch("https://warehouseapi.ludilove.ru/api/category/getcategory?id=" + id, {
      method: 'GET',
      headers: {
                    'Authorization': `Bearer ${localStorage.getItem("token")}`
                }
    });
            if(!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
            return await response.json();
        } catch(e) {
            console.error("Ошибка при получении категории:", e)
            return null;
        }
    }

    async function buildInterface(data, id) {

        const objectInfo = {
            category: null,
            subcategory: null,
            subsubcategory: null,
            holder: data[0]?.warehouseObjects?.holder ? data[0]?.warehouseObjects?.holder : null,
            location: data[0]?.warehouseObjects?.location?.name ? data[0]?.warehouseObjects?.location?.name : null,
            status: data[0]?.warehouseObjects?.actual ? data[0]?.warehouseObjects?.actual : null
        }

        const category = data[0]?.warehouseObjects?.warehouseCategories;

        if (!category) {
            console.error("Категория не найдена в данных");
            return;
        }

        // Если это главная категория
        if (category.parent === null) {
            objectInfo.category = category.name;
        } else {
            const parent = await getCategory(category.parent);
            if (!parent) return;

            if (parent.parent === null) {
                // Это подкатегория
                objectInfo.category = parent.name;
                objectInfo.subcategory = category.name;
            } else {
                // Это под-подкатегория
                const grandParent = await getCategory(parent.parent);
                if (!grandParent) return;

                objectInfo.category = grandParent.name;
                objectInfo.subcategory = parent.name;
                objectInfo.subsubcategory = category.name;
            }
        }

        if(objectInfo?.holder && objectInfo?.holder?.patronymic == null)
        {
            objectInfo.holder.patronymic = ""
        }

        let block = `
        <div class="details">
            <div class="details_current">
                <h3><b>ID:</b> ${id} </h3>
                <p><b>Категория:</b> ${objectInfo.category ? objectInfo.category : ""} </p>
                <p><b>Подкатегория:</b> ${objectInfo.subcategory ? objectInfo.subcategory : ""}</p>
                <p><b>Наименование:</b> ${objectInfo.subsubcategory ? objectInfo.subsubcategory : ""}</p>
                <p><b>Держатель:</b> ${objectInfo.holder ? objectInfo.holder.surname + " " + objectInfo.holder.name + " " + objectInfo.holder.patronymic : ""}</p>
                <p><b>ТТ:</b> ${objectInfo.location ? objectInfo.location : ""}</p>
                <p><b>Статус:</b> ${objectInfo?.status === 1 ? "Активен" : "Списан"}</p>
            </div>

            <div class="details_history">

                <div class="history_card" style="background-color: #00ff001c">
                    <div class="history_card_header">Оприходование</div>
                </div>`

        let str = ""

        data.forEach((elem, index) => {

            if(index === 1 && elem.warehouseAction?.id === 2) {
                str += `<div class="history_card" style="background-color: #ffff001c">
                            <div class="history_card_header">Перемещение</div>
                        </div>`
            }



            if((index === data.length - 1) && data[0].warehouseObjects?.actual === 0) {
                str += `<div class="history_card" style="background-color: #ff00001c">
                        <div class="history_card_header">Списание</div>
                      </div>`
            }

            if(elem.holder && elem.holder.patronymic == null)
            {
                elem.holder.patronymic = ""
            }

            str += `
                <div class="history_card">
                    <div class="history_card_body">
                        <p>${elem?.user}</p>
                        <p>${elem?.location?.name ? elem?.location?.name : ""}</p>
                        <p style='min-width: 115px;'>${elem?.dateTime.split(".")[0].split("T").join(" ").replace(/^(\d{4})-(\d{2})-(\d{2}) (\d{2}:\d{2}):\d{2}$/, "$3.$2.$1 $4")}</p>
                        <p style='overflow-wrap: anywhere;'>${elem?.comment ? elem?.comment : ""}</p>
                        <p>${elem?.holder?.name ? elem.holder.surname + " " + elem.holder.name + " " + elem.holder.patronymic : ""}</p>
                    </div>
                </div>`
        })

        let buttons;

        if(data[0].warehouseObjects?.actual === 0)
        {
            buttons = `<div class="btn_wrapper">
                <button style="cursor: not-allowed;" class="btn btn-default btn-write-off" disabled>Списать</button>
            </div>`
        } else {

           const rights = "@rights"

           if(rights == "true")
           {
               buttons = `<div class="btn_wrapper">
                    <button class="btn btn-default btn-write-off" onClick='openModalStockSearchCard()'>Списать</button>
                </div>`
           } else {
               buttons = `<div class="btn_wrapper">
                    <button style="cursor: not-allowed;" class="btn btn-default btn-write-off" disabled>Списать</button>
                </div>`
           }
        }

        const resString = block + str + "</div></div>";

        card_details.innerHTML = resString;
        card_details.innerHTML += buttons;
    }

    async function writeOffItem(name) {
        const id = input_search.value;
        const url = new URL("https://warehouseapi.ludilove.ru/api/objects/WriteOffObject", {
          method: 'GET',
          credentials: 'include'
        });
        const params = new URLSearchParams();
        params.append("id", id);
        params.append("user", name);

        url.search = params.toString();
        try {

            $("#spinner").show();
            const response = await fetch(url.toString(), {
                method: "DELETE"
            })

            if(!response.ok) {
                const errorText = await response.json();
                throw new Error("Ошибка списания!", errorText)
            }

            search();

        } catch(e) {

            console.log(e.message)

        } finally {
            closeModal();
            $("#spinner").hide();

        }
    }
</script>