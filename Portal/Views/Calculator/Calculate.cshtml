@model Portal.Models.Calculator.CalculatorInformation
<!--блок элементов сверху-->
<div class="row" style="margin-top: 0px; margin-bottom:10px">

    <!--Назад-->
    <a href="#calculators" class="col-sm-1 el-marging" style="width:100px; cursor:pointer; color:black">
        <img src="~/themes/clearmin/img/md/dark/keyboard-backspace.svg" height="38" width="24"><label style="margin-left:10px; cursor:pointer">назад</label>
    </a>

</div>

@if (Model.TTs.Count == 1 && ViewBag.logs != null)
{
    var logs = ViewBag.logs as List<Portal.Models.MSSQL.CalculatorLogsTest>; // Приводим ViewBag.logs к конкретному типу
    if (logs != null && logs.Count(x => x?.Rest != null) > 1)
    {
        <div class="calculator_info">
            В полях ввода отображаются последние значения, которые были введены за последние 30 минут.
            Эти значения показаны только для справки.
        </div>
    }
}


<div class="calculator-mainbar">
    @if (Model.TTs.Count == 1)
    {
        <div class="calculator-leftbar">
            <div class="calculator-bar">
                @Model.Name
            </div>
            <div class="calculator-bar">
                @Model.TTs[0].Name
            </div>
            <div class="calculator-bar">
                @Model.User
            </div>
            <div class="calculator-bar">
                @Model.Date
            </div>
            <div class="div-img">
                <img class="calculator-img" src='@Url.Content(Model.PicturePath)'>
            </div>
        </div>
        <div class="calculator-rightbar">
            <table class="calculator-table">
                <thread>
                    <tr>
                        <th>№</th>
                        <th>Наименование</th>
                        <th class="defrostTime">Время дефроста</th>
                        <th class="bakingMode">Режим выпечки</th>
                        <th>Осталось</th>
                        <th>План</th>
                        <th>Факт</th>
                        @if (Model.Items[0].ItemOnTT.Item.ItemsGroup == Guid.Parse("9C42DDD0-3ABE-4105-AFA1-BFDA989C3836"))
                        {
                            <th>Расход булок</th>
                        }                        
                    </tr>
                </thread>
                <tbody>
                    @for (int i = 0; i < Model.Items.Count; i++)
                    {
                        <tr>
                            <td>@(i + 1)</td>
                            <td>@Model.Items[i].ItemOnTT.Item.Name</td>
                            <td class="defrostTime" style="text-align: center">@Model.Items[i].ItemOnTT.Item.DefrostTime</td>
                            <td class="bakingMode" style="text-align: center">@Model.Items[i].ItemOnTT.Item.BakingMode</td>
                            <td>
                                @if(ViewBag.logs[i] != null)
                                {
                                    <input class="inputObject" placeholder="@ViewBag.logs[i]?.Rest" style="text-align: center;" maxlength="4" type="text" size='4' oninput='calculate(this)'>
                                } else {
                                    <input class="inputObject" style="text-align: center;" maxlength="4" type="text" size='4' oninput='calculate(this)'>
                                }
                            </td>
                            <td class="answer" style="text-align: center" id=@i>0</td>                            
                            <td class="hidden">
                                <input class="averageRestOfThisPeriod" value="@Model.Items[i].AverageRestOfThisPeriod">
                                <input class="averageNextPer" value="@Model.Items[i].AverageNextPer">
                                <input class="averageSecondNextPer" value="@Model.Items[i].AverageSecondNextPer">
                                <input class="averageProductionPeriod" value="@Model.Items[i].AverageProductionPeriod">
                                <input class="ProductionPeriodSum" value="@Model.Items[i].ProductionPeriodSum">
                                <input class="SumRestOfThisPeriod" value="@Model.Items[i].SumRestOfThisPeriod">
                                <input class="SumNextPer" value="@Model.Items[i].SumNextPer">
                                <input class="SumSecondNextPer" value="@Model.Items[i].SumSecondNextPer">
                                <input class="SettlementDaysRestOfThisPeriod" value="@Model.Items[i].SettlementDaysRestOfThisPeriod">
                                <input class="SettlementDaysNextPer" value="@Model.Items[i].SettlementDaysNextPer">
                                <input class="SettlementDaysSecondNextPer" value="@Model.Items[i].SettlementDaysSecondNextPer">
                                <input class="itemOnTTCoef" value="@Model.Items[i].ItemOnTT.Coefficient">
                                <input class="itemCoef" value="@Model.Items[i].ItemOnTT.Item.Coefficient">
                                <input class="thisPeriodCoefficient" value="@Model.ThisPeriodCoefficient">
                                <input class="nextPeriodCoefficient" value="@Model.NextPeriodCoefficient">
                                <input class="nextSecondPeriodCoefficient" value="@Model.NextSecondPeriodCoefficient">
                                <input class="itemCode" value="@Model.Items[i].ItemOnTT.Item.RkCode">
                                <input class="itemName" value="@Model.Items[i].ItemOnTT.Item.Name">
                                <input class="itemMinShowCase" value="@Model.Items[i].ItemOnTT.Item.MinShowCase">
                                @if (Model.Items[i].ItemOnTT.Item.ItemsGroup == Guid.Parse("9C42DDD0-3ABE-4105-AFA1-BFDA989C3836"))
                                {
                                    <input class="isSandvich" value="true">
                                    <input class="SandwichOnBuns" value="@Model.Items[i].ItemOnTT.Item.SandwichOnBuns">
                                }
                                 else
                                {
                                    <input class="isSandvich" value="false">
                                }
                            </td>
                            <td>
                                @if (ViewBag.logs[i]?.Fact == null)
                                {
                                    <input class="fact" style="text-align: center;" maxlength="4" type="text" size='4' oninput='factChange(this)'>
                                } else 
                                {
                                    <input class="fact" placeholder="@ViewBag.logs[i]?.Fact" style="text-align: center;" maxlength="4" type="text" size='4' oninput='factChange(this)'>
                                }                                
                            </td>
                            @if (Model.Items[i].ItemOnTT.Item.ItemsGroup == Guid.Parse("9C42DDD0-3ABE-4105-AFA1-BFDA989C3836"))
                            {
                                <td style="text-align: center" class="Buns"></td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else
    {
        <div class='ttbut_styles'>
            @for (int i = 0; i < Model.TTs.Count; i++)
            {
                <button class="ttbut" id=@Model.TTs[i].Restaurant_Sifr onclick="ttbutClick(this)">@Model.TTs[i].Name</button>
            }
        </div>
    } 
</div>

<script>
    function calculate(inputObject){
        inputObject.value = inputObject.value.replace(/[^\d]/g, '');      
        let trObject = inputObject.parentNode.parentNode;
        let answerObject = trObject.querySelector('.answer');
        let isSandvichObject = trObject.querySelector('.isSandvich');

        let averageRestOfThisPeriod = trObject.querySelector('.averageRestOfThisPeriod').value.replace(/(,)/, ".");
        if(+averageRestOfThisPeriod < 0.3 || +averageRestOfThisPeriod > 1){
            averageRestOfThisPeriod + 0;
        } else {
            averageRestOfThisPeriod = 1;
        }
        let averageNextPer = trObject.querySelector('.averageNextPer').value.replace(/(,)/, ".");
        let averageSecondNextPer = trObject.querySelector('.averageSecondNextPer').value.replace(/(,)/, ".");
        let averageProductionPeriod = trObject.querySelector('.averageProductionPeriod').value.replace(/(,)/, ".");

        let itemOnTTCoef = trObject.querySelector('.itemOnTTCoef').value.replace(/(,)/, ".");
        let itemCoef = trObject.querySelector('.itemCoef').value.replace(/(,)/, ".");
        let thisPeriodCoefficient = trObject.querySelector('.thisPeriodCoefficient').value.replace(/(,)/, ".");
        let nextPeriodCoefficient = trObject.querySelector('.nextPeriodCoefficient').value.replace(/(,)/, ".");
        let nextSecondPeriodCoefficient = trObject.querySelector('.nextSecondPeriodCoefficient').value.replace(/(,)/, ".");
        let itemCode = trObject.querySelector('.itemCode').value;
        let itemName = trObject.querySelector('.itemName').value;
        let itemMinShowCase = trObject.querySelector('.itemMinShowCase').value;
        let resp;
        switch (@Model.Reaction)
         {
            case 0:
                resp = 0;
                break;
            case 1:
                if(+inputObject.value < +averageProductionPeriod){
                    resp = Math.round((+averageRestOfThisPeriod - +averageProductionPeriod) * +itemCoef * +itemOnTTCoef * +thisPeriodCoefficient)
                    break;
                }
                resp = Math.round(+averageRestOfThisPeriod * +itemCoef * +itemOnTTCoef * +thisPeriodCoefficient - +inputObject.value);
                break;
            case 2:
                if (+inputObject.value < +averageProductionPeriod) {
                    resp = Math.round((+averageNextPer * +nextPeriodCoefficient + (+averageRestOfThisPeriod - +averageProductionPeriod) * +thisPeriodCoefficient) * +itemCoef * +itemOnTTCoef)
                    break;
                }
                resp = Math.round(+averageNextPer * +itemCoef * +itemOnTTCoef * +nextPeriodCoefficient + (+averageRestOfThisPeriod * +itemCoef * +itemOnTTCoef * +thisPeriodCoefficient - +inputObject.value));
                break;
            case 3:
                if (+inputObject.value < +averageProductionPeriod) {
                    resp = Math.round((+averageSecondNextPer * +nextSecondPeriodCoefficient + +averageNextPer * +nextPeriodCoefficient + (+averageRestOfThisPeriod - +averageProductionPeriod) * +thisPeriodCoefficient) * +itemCoef * +itemOnTTCoef)
                    break;
                }
                resp = Math.round((+averageSecondNextPer * +nextSecondPeriodCoefficient + +averageNextPer * +nextPeriodCoefficient) * +itemCoef * +itemOnTTCoef + (+averageRestOfThisPeriod * +itemCoef * +itemOnTTCoef * +thisPeriodCoefficient - +inputObject.value));
                break;
         }
        if (resp < 0) {resp = 0}

        resp = getResultWithMinShowCase(inputObject.value, resp, itemMinShowCase);

        // корректировка по булкам для сэндвичей
        if(isSandvichObject.value === 'true'){
                resp = bunsCorrect(trObject, resp);
        }

        answerObject.textContent = resp;
        var log = {};
        log.UserName = '@Html.Raw(Model.User)';
        log.ItemCode = itemCode;
        log.ItemName = itemName;
        log.TTCode = '@Html.Raw(Model.TTs[0].Restaurant_Sifr)';
        log.TTName = '@Html.Raw(Model.TTs[0].Name)';
        log.Rest = inputObject.value;
        log.Result = answerObject.textContent;

        $("#spinner").show()
        document.querySelectorAll(".inputObject").forEach(x => x.disabled = true)
        document.querySelectorAll(".fact").forEach(x => x.disabled = true)

        WriteLog(log, inputObject)
    }
</script>

<script>
    // Получение результата в зависимости от минимального значения продукции
    function getResultWithMinShowCase(Rest = 0, Result, MinShowCase) {
        if (Result >= MinShowCase - Rest) {
            return Result;
        } else {
            return MinShowCase - Rest;
        }
    }
</script>

<script>
        function factChange(factObject){
        factObject.value = factObject.value.replace(/[^\d.]/g, '');
        let trObject = factObject.parentNode.parentNode;
        let isSandvichObject = trObject.querySelector('.isSandvich');
    // корректировка по булкам для сэндвичей
        if(isSandvichObject.value === 'true'){
           trObject.querySelector('.itemName').textContent = bunsCorrect(trObject, factObject.value);
        }
        let itemCode = trObject.querySelector('.itemCode').value;
        let itemName = trObject.querySelector('.itemName').value;
        let answerObject = trObject.querySelector('.answer');
        let inputObject = trObject.querySelector('.inputObject');
        var log = {};
        log.UserName = '@Html.Raw(Model.User)';
        log.ItemCode = itemCode;
        log.ItemName = itemName;
        log.TTCode = '@Html.Raw(Model.TTs[0].Restaurant_Sifr)';
        log.TTName = '@Html.Raw(Model.TTs[0].Name)';
        log.Rest = inputObject.value;
        log.Result = answerObject.textContent;
        log.Fact = factObject.value;

        // Закрываем инпуты для ввода и активируем loader
        $("#spinner").show()
        document.querySelectorAll(".inputObject").forEach(x => x.disabled = true)
        document.querySelectorAll(".fact").forEach(x => x.disabled = true)

        WriteLog(log, factObject)
    }
</script>

<script>

    let attempts = 0;

    async function WriteLog(log, element) {

        var logjsn = JSON.stringify(log);
        logjsn = logjsn.replace(/ /g, "%bkspc%");
        try {

            await $.ajax({
                type: "POST",
                url: '/Calculator/LogSave',
                data: { logjsn: logjsn },
                dataType: "text",
                success: function (result) {
                    const ok = JSON.parse(result)
                    if (!ok.ok) {
                        switch(ok.errorMessage){
                            case "401":
                                openModal(
                                    'Аккаунт использован на другом устройстве',
                                    'Ваша учетная запись была использована на другом устройстве. Пожалуйста, войдите снова.'
                                );
                                setTimeout((x) => {
                                    window.location.replace('Account/Logout');
                                }, 10000)
                            break
                            default:
                                openModal('Ошибка', "Ошибка контроллера. Попробуйте повторить попытку позже");
                        }
                    }

                    $("#spinner").hide()
                    document.querySelectorAll(".inputObject").forEach(x => x.disabled = false)
                    document.querySelectorAll(".fact").forEach(x => x.disabled = false)
                    element.focus()
                },
            });
        } catch(e) {

            if(e.status == 401)
            {
                openModal(
                    'Сессия истекла',
                    'Время действия вашей сессии истекло. Пожалуйста, войдите снова.'
                );
                setTimeout((x) => {
                    location.reload()
                }, 10000)
               
            }

            if(e.status == 0)
            {
                await setTimeout(async () => {
                    if(attempts >= 4)
                    {
                        $("#spinner").hide()
                        attempts = 0
                        document.querySelectorAll(".inputObject").forEach(x => x.disabled = false)
                        document.querySelectorAll(".fact").forEach(x => x.disabled = false)

                        element.value = ""
                        let planId = +element.parentElement.parentElement.children[0].textContent - 1

                        document.getElementById(planId).textContent = 0

                        openModal('Ошибка', "Нет соединения с интернетом, проверьте подключение");

                    } else {
                        attempts++
                        await WriteLog(log, element)
                    }
                }, 2500)
                
            }
           
        }
    }
</script>

<script>
    function ttbutClick(thisBut) {
        let butref = '/Calculator/Calculate?typeGuid=' + '@Html.Raw(Model.ItemsGroup.Guid)' + '&tt=' + thisBut.id
        loadContent(location.hash.replace('#', ''), butref)
    }
</script>

<!-- Логика добавления\удаление столбцов на телефоне -->
<script>
    const defrostTime = document.querySelectorAll('.defrostTime');
    const bakingMode = document.querySelectorAll('.bakingMode');
    hideOrShow();

    function hideOrShow() {
        let width = document.body.clientWidth;
        if (width < 490) { 
            defrostTime.forEach(x => x.classList.add('hidden'))
            bakingMode.forEach(x => x.classList.add('hidden'))
        } else {
            defrostTime.forEach(x => x.classList.remove('hidden'))
            bakingMode.forEach(x => x.classList.remove('hidden'))
        }
    }

    window.addEventListener('resize', (e) => {
        hideOrShow()
    })
</script>

<script>
    // корректировка по булкам для сэндвичей
    function bunsCorrect(trObject, resp) {
                    let bunsObject = trObject.querySelector('.SandwichOnBuns');
                    let buns = trObject.querySelector('.Buns');
                    let bunscount = +bunsObject.value;
                    if(bunscount !== 0){
                     resp = +resp + resp%bunscount;
                     buns.textContent = +resp/bunscount;
                    }
                    return resp;
    }
</script>


<!-------------------------------------------------------------------->


<style>
    .calculator_info {
        width: 100%;
        background: #CFE2FF;
        padding: 10px 5px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: #0D4BB6;
        font-weight: 600;
        font-family: 'Akrobat-Regular';
        font-size: 16px;
        margin-bottom: 12px;
        border: 1px solid #B6D4FE;
        border-radius: 5px;
        text-align: center;
    }
</style>