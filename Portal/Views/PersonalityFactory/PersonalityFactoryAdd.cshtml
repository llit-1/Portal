@model Portal.Controllers.PersonalityFactoryController.PersonalityFactoryAddModel

<div id="headMenu" class="row" style="margin:0px">
    <div class="col-12" style="display:inline-block">
        <!--блок заголовка-->
        <table class="table-page-menu" style="margin-top: 10px; margin-bottom: 10px">
            <tbody>
                <tr>
                    <!--назад-->
                    <td id="back" style="text-align:left; width:100px; cursor:pointer">
                        <img src="/themes/clearmin/img/md/dark/keyboard-backspace.svg" height="38" width="24" style="cursor:pointer">
                        <label style="margin-left:10px; cursor:pointer">назад</label>
                    </td>
                    <!--заголовок-->
                    <td>
                        <h2 id="header" style="margin:0px; margin-left:5px; margin-right:20px; margin-bottom:6px"></h2>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
</div>

<div class="perosnalityFactoryAdd-wrapper">
    <form class="perosnalityFactoryAdd-form" id="personalityForm" onsubmit="event.preventDefault(); AddFactoryPerson();">

        <div class="stage1-wrapper">

            <label class="label-light">Фамилия</label>
            <input required type="text" class="form-control" placeholder="Введите фамилию" id="surnameFactory" value="">

            <div class="personalityFactory-smallFieldsWrapper">
                <div class="fullwidthFactoryField">
                    <label class="label-light">Имя</label>
                    <input required type="text" class="form-control" placeholder="Введите имя" id="nameFactory" value="">
                </div>

                <div class="fullwidthFactoryField">
                    <label class="label-light">Отчество</label>
                    <input type="text" class="form-control" placeholder="Введите отчество" id="lastnameFactory" value="">
                </div>

            </div>


            <label class="label-light">Дата рождения</label>
            <input required type="date" class="form-control" placeholder="ДД.ММ.ГГГГ" id="dateBirthFactory" value="">

            <div class="personalityFactory-smallFieldsWrapper">
                <div class="fullwidthFactoryField">
                    <label class="label-light">ИНН</label>
                    <input required type="text" class="form-control" minlength="12" maxlength="12" placeholder="000000000000" id="innFactory" value="">
                </div>

                <div class="fullwidthFactoryField">
                    <label class="label-light">СНИЛС</label>
                    <input required type="text" class="form-control" minlength="14" maxlength="14" placeholder="000-000-000 00" id="factorySnils" value="">
                </div>
            </div>

            <div class="form-group">
                <label class="label-light" style="width:100%">Отдел</label>
                <div style="width:100%; float:left;">
                    <select required id="departmentFactory" class="form-control selectors" data-width="100%">
                        <option></option>
                        @foreach (var item in Model.FactoryDepartments.OrderBy(x => x.Name))
                        {
                            <option value="@item.Id">@item.Name</option>
                        }
                    </select>
                </div>
            </div>

            <div class="form-group">
                <label class="label-light" style="width:100%">Участок</label>
                <div style="width:100%; float:left;">
                    <select required id="workshopFactory" class="form-control selectors" data-width="100%" disabled></select>
                </div>
            </div>

            <div class="form-group">
                <label class="label-light" style="width:100%">Должность</label>
                <div style="width:100%; float:left;">
                    <select required id="positionFactory" class="form-control selectors" data-width="100%" disabled></select>
                </div>
            </div>

        </div>

        <div class="stage2-wrapper">

            <div class="personalityFactory-smallFieldsWrapper">
                <div class="fullwidthFactoryField">

                    <div class="form-group">
                        <label class="label-light" style="width:100%">Тип гражданства</label>
                        <div style="width:100%; float:left;">
                            <select required id="citizenshipTypeFactory" class="form-control selectors" data-width="100%">
                                <option></option>
                                @foreach (var item in Model.FactoryCitizenshipTypes.OrderBy(x => x.Name))
                                {
                                    <option value="@item.Id">@item.Name</option>
                                }
                            </select>
                        </div>
                    </div>

                </div>
                <div class="fullwidthFactoryField">

                    <div class="form-group">
                        <label class="label-light" style="width:100%">Гражданство</label>
                        <div style="width:100%; float:left;">
                            <select required id="citizenshipFactory" class="form-control selectors" data-width="100%" disabled></select>
                        </div>
                    </div>

                </div>
            </div>



            <div class="form-group">
                <label class="label-light" style="width:100%">Юр. лицо</label>
                <div style="width:100%; float:left;">
                    <select required id="legalEntityFactory" class="form-control selectors" data-width="100%">
                        <option></option>
                        @foreach (var item in Model.FactoryEntities.OrderBy(x => x.Name))
                        {
                            <option value="@item.Id">@item.Name</option>
                        }
                    </select>
                </div>
            </div>

            <div class="form-group">
                <label class="label-light" style="width:100%">Тип документа</label>
                <div style="width:100%; float:left;">
                    <select required id="documentTypeFactory" class="form-control selectors" data-width="100%">
                        <option></option>
                        @foreach (var item in Model.FactoryDocumentTypes.OrderBy(x => x.Name))
                        {
                            <option value="@item.Id">@item.Name</option>
                        }
                    </select>
                </div>
            </div>

            <div class="personalityFactory-smallFieldsWrapper">
                <div class="fullwidthFactoryField">
                    <label class="label-light">Номер телефона</label>
                    <input required type="text" class="form-control" minlength="10" maxlength="10" placeholder="9XXXXXXXXX" id="telFactory" value="">
                </div>
                <div class="fullwidthFactoryField">
                    <label class="label-light">Номер банковской карты</label>
                    <input required type="text" class="form-control" placeholder="0000 0000 0000 0000" minlength="19" maxlength="19" id="cardFactory" value="">
                </div>
            </div>

            <div class="form-group">
                <label class="label-light" style="width:100%">Банк</label>
                <div style="width:100%; float:left;">
                    <select required id="bankFactory" class="form-control selectors" data-width="100%">
                        <option></option>
                        @foreach (var item in Model.FactoryBanks.OrderBy(x => x.Name))
                        {
                            <option value="@item.Id">@item.Name</option>
                        }
                    </select>
                </div>
            </div>

            <div class="personalityFactory-smallFieldsWrapper">
                <div class="fullwidthFactoryField">
                    <label class="label-light">Дата въезда</label>
                    <input type="date" class="form-control" placeholder="ДД.ММ.ГГГГ" id="entryDateFactory" value="">
                </div>
                <div class="fullwidthFactoryField">
                    <label class="label-light">Дата выезда</label>
                    <input type="date" class="form-control" placeholder="ДД.ММ.ГГГГ" id="exitDateFactory" value="">
                </div>
            </div>

            <div class="personalityFactory-smallFieldsWrapper">
                <div class="fullwidthFactoryField">
                    <label class="label-light">Дата приема на работу</label>
                    <input required type="date" class="form-control" placeholder="ДД.ММ.ГГГГ" id="hireDateFactory" value="">
                </div>
                <div class="fullwidthFactoryField">
                    <label class="label-light">Дата увольнения</label>
                    <input type="date" class="form-control" placeholder="ДД.ММ.ГГГГ" id="dismissalDateFactory" value="">
                </div>
            </div>



        </div>

        <div class="lastStage-wrapper">
            <div class="photo-wrapper">
                <img src="/svg/panels/help.svg" id="imgPhotoWrapper" class="imgForPhotoWrapper" width="90px">
                <video id="videoPlayerFactory" class="hidden"></video>
            </div>

            <div class="lastStage-secondWrapper">
                <div class="buttonsForCameraWrapper">
                    <div>
                        <label class="label-light">Номер пропуска</label>
                        <input type="text" class="form-control" minlength="10" maxlength="10" placeholder="0000000000" id="PassCardNumberFactory" value="">
                    </div>
                    
                    <button class="photo-buttonAdd" onclick="getCameraAccess()" id="photo-buttonAdd" type="button">Добавить фото</button>
                </div>

                <button class="btn btn-success btn-addPersonFactory" type="submit">Добавить сотрудника</button>
            </div>
        </div>

        <div id="cropModal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.8); z-index: 1050; justify-content: center; align-items: center;">
            <div style="background: white; padding: 20px; border-radius: 2px; max-width: 90%; max-height: 90%; backdrop-filter: blur(2px);">
                <div style="max-height: 70vh; overflow: hidden;">
                    <img id="cropImage" src="" style="display: block; max-width: 100%;">
                </div>
                <div style="margin-top: 20px; text-align: center;display: flex;justify-content: space-between;font-family: 'Akrobat-Regular';">
                    <button onclick="closeCropModal()" type="button" class="btn btn-secondary">Отмена</button>
                    <button onclick="crop()" type="button" class="btn btn-success">Cохранить</button>
                    
                </div>
            </div>
        </div>

    </form>
</div>


<script>
    // Объявление переменных со всеми полями
    const surnameFactory = document.getElementById('surnameFactory');
    const nameFactory = document.getElementById('nameFactory');
    const lastnameFactory = document.getElementById('lastnameFactory');
    const dateBirthFactory = document.getElementById('dateBirthFactory');
    const innFactory = document.getElementById('innFactory');
    const factorySnils = document.getElementById('factorySnils');
    const departmentFactory = document.getElementById('departmentFactory');
    const workshopFactory = document.getElementById('workshopFactory');
    const positionFactory = document.getElementById('positionFactory');
    const citizenshipTypeFactory = document.getElementById('citizenshipTypeFactory');
    const citizenshipFactory = document.getElementById('citizenshipFactory');
    const legalEntityFactory = document.getElementById('legalEntityFactory');
    const documentTypeFactory = document.getElementById('documentTypeFactory');
    const telFactory = document.getElementById('telFactory');
    const cardFactory = document.getElementById('cardFactory');
    const bankFactory = document.getElementById('bankFactory');
    const entryDateFactory = document.getElementById('entryDateFactory');
    const exitDateFactory = document.getElementById('exitDateFactory');
    const hireDateFactory = document.getElementById('hireDateFactory');
    const dismissalDateFactory = document.getElementById('dismissalDateFactory');
    const passcardnumberfactory = document.getElementById('PassCardNumberFactory');

    $("#PageHeader").text("Учет сотрудников (Завод)")
    $('#back').unbind('click');
    $('#back').click(function () {
        SpinnerShow();
        $('#container-fluid').load(`/PersonalityFactory/PersonalityFactoryTable`, function () {
            SpinnerHide()
        });
    });


    // Валидация СНИЛСА
    factorySnils.addEventListener('input', function(e) {
        // 1. Удаляем все не-цифры (дефисы, пробелы и т.д.)
        let value = e.target.value.replace(/\D/g, '');

        // 2. Добавляем дефисы и пробел
        if (value.length > 3) value = value.slice(0, 3) + '-' + value.slice(3);
        if (value.length > 7) value = value.slice(0, 7) + '-' + value.slice(7);
        if (value.length > 11) value = value.slice(0, 11) + ' ' + value.slice(11);

        // 3. Обрезаем лишнее (если больше 11 цифр)
        e.target.value = value.slice(0, 14); // Максимум 14 символов (XXX-XXX-XXX XX)
    });

    function formatCardNumber()
    {
        // 1. Удаляем все не-цифры
        let value = cardFactory.value.replace(/\D/g, '');

        // 2. Обрезаем до 16 цифр
        value = value.slice(0, 16);

        // 3. Добавляем пробелы через каждые 4 цифры
        let formattedValue = '';
        for (let i = 0; i < value.length; i++) {
            if (i > 0 && i % 4 === 0) {
                formattedValue += ' ';
            }
            formattedValue += value[i];
        }

        // 4. Устанавливаем отформатированное значение
        cardFactory.value = formattedValue;
    }

    // Проверка на ввод только русских букв
    function checkOnlyRussianTextInput(e) {
        if (/[a-zA-Z0-9.,]/.test(e.target.value)) {
            e.target.value = e.target.value.replace(/[a-zA-Z0-9.,]/g, ''); // Удаляем латиницу
        }
    }

    // Проверка на ввод только цифр
    function checkOnlyNumberInput(e) {
        if (/[а-яА-Яa-zA-Z.,]/.test(e.target.value)) {
            e.target.value = e.target.value.replace(/[а-яА-Яa-zA-Z.,]/g, '');
        }
    }

    // Накидываем нужные обработчики на поля
    innFactory.addEventListener('input', checkOnlyNumberInput);
    factorySnils.addEventListener('input', checkOnlyNumberInput);
    cardFactory.addEventListener('input', checkOnlyNumberInput);
    telFactory.addEventListener('input', checkOnlyNumberInput);
    surnameFactory.addEventListener('input', checkOnlyRussianTextInput);
    nameFactory.addEventListener('input', checkOnlyRussianTextInput);
    lastnameFactory.addEventListener('input', checkOnlyRussianTextInput);
    cardFactory.addEventListener('input', formatCardNumber);

    departmentFactory.addEventListener("change", getWorkshops);
    workshopFactory.addEventListener("change", getJobTitles);
    citizenshipTypeFactory.addEventListener("change", getCitizenship);


    async function getJobTitles() {
        const departmentId = departmentFactory.value;
        const workshopId = workshopFactory.value;

        if(!departmentId)
        {
            return alert("Выберите отдел!")
        }

        if(!workshopId)
        {
            positionFactory.innerHTML = "<option></option>"
            positionFactory.disabled = true;
            return;
        }

        try {
            SpinnerShow();
            const req = await fetch("/PersonalityFactory/GetJobTitles?depertment=" + departmentId + "&workshop=" + workshopId)
            const response = await req.json();

            if(!response)
            {
                return alert("Должностей не найдено!")
            }

            positionFactory.innerHTML = "<option></option>"
            positionFactory.disabled = false;

            response.forEach(element => {
                positionFactory.innerHTML += `<option value="${element.id}">${element.name}</option>`
            })
        } catch(e) {
            alert(e)
        } finally {
            SpinnerHide();
        }
    }

    async function getWorkshops() {
        const id = departmentFactory.value;

        if(!id)
        {
            workshopFactory.innerHTML = "<option></option>"
            workshopFactory.disabled = true;
            positionFactory.innerHTML = "<option></option>"
            positionFactory.disabled = true;
            
            return;
        }

        try {
            SpinnerShow();
            const req = await fetch("/PersonalityFactory/GetWorkshops?depertment=" + id)
            const response = await req.json();

            if(!response)
            {
                return alert("Участков не найдено!")
            }

            workshopFactory.innerHTML = "<option></option>"
            workshopFactory.disabled = false;
            positionFactory.disabled = true
            positionFactory.innerHTML = "<option></option>"

            response.forEach(element => {
                workshopFactory.innerHTML += `<option value="${element.id}">${element.name}</option>`
            })
        } catch(e) {
            alert(e)
        } finally {
            SpinnerHide();
        }
    }

    async function getCitizenship() {
        const citizenshipTypeid = citizenshipTypeFactory.value;

        if(!citizenshipTypeid)
        {
            return;
        }

        try {
            SpinnerShow();
            const req = await fetch("/PersonalityFactory/GetCitizenship?citizenshipType=" + citizenshipTypeid)
            const response = await req.json();

            if(!response)
            {
                return alert("Ничего не найдено!")
            }

            citizenshipFactory.innerHTML = "<option></option>"
            citizenshipFactory.disabled = false;


            response.forEach(element => {
                citizenshipFactory.innerHTML += `<option value="${element.id}">${element.name}</option>`
            })
        } catch(e) {
            alert(e)
        } finally {
            SpinnerHide();
        }
    }


    async function AddFactoryPerson(e) {

        if(factorySnils.value.replaceAll("-", "").replaceAll(" ","").trim().length != 11)
        {
            return alert('Некорректно заполнено поле "Снилс"');
        }

        if( cardFactory.value.trim().replaceAll(" ", "").length != 16)
        {
            return alert('Некорректно заполнено поле "Номер банковской карты"');
        }

        const imgElement = document.getElementById("imgPhotoWrapper");
        const photoDataUrl = imgElement.src;
        const isDefaultImage = photoDataUrl.includes('/svg/panels/help.svg');

        const person = {
            Surname: surnameFactory.value.trim().replace(/\s+/g, ' '),
            Name: nameFactory.value.trim().replace(/\s+/g, ' '),
            Patronymic: lastnameFactory.value.trim().replace(/\s+/g, ' '),
            Birthdate: dateBirthFactory.value.trim(),
            INN: innFactory.value.trim(),
            SNILS: factorySnils.value.replaceAll("-", "").replaceAll(" ","").trim(),
            FactoryDepartment: parseInt(departmentFactory.value.trim()),
            FactoryWorkshop: parseInt(workshopFactory.value.trim()),
            FactoryJobTitle: parseInt(positionFactory.value.trim()),
            FactoryCitizenship: parseInt(citizenshipFactory.value.trim()),
            FactoryEntity: parseInt(legalEntityFactory.value.trim()),
            FactoryDocumentType: parseInt(documentTypeFactory.value.trim()),
            Phone: telFactory.value.trim(),
            CardNumber: cardFactory.value.trim().replaceAll(" ", ""),
            FactoryBanks: parseInt(bankFactory.value.trim()),
            HostelChekin: entryDateFactory.value.trim() || null,
            HostelCheckOut: exitDateFactory.value.trim() || null,
            HiringDate: hireDateFactory.value.trim(),
            DismissedDate: dismissalDateFactory.value.trim() || null,
            Photo: isDefaultImage ? null : photoDataUrl,
            PassCardNumber: passcardnumberfactory.value.trim()
        };

        SpinnerShow();

        $.ajax({
            type: "POST",
            url: '/PersonalityFactory/SaveNewPerson',
            contentType: "application/json",
            data: JSON.stringify(person),
            success: function (result) {
                SpinnerHide();
                $('#container-fluid').load(`/PersonalityFactory/PersonalityFactoryTable`)
            },
            error: function (error) {
                SpinnerHide();
                alert(error.responseText);
            }
        });
    }

    const constraints = {
      video: {
        width: { ideal: 1280 },
        height: { ideal: 720 },
        facingMode: "user"
      },
      audio: false
    };

    async function getCameraAccess() {
      try {
        const stream = await navigator.mediaDevices.getUserMedia(constraints);
        // Теперь у нас есть поток (stream), который можно использовать
        useStream(stream);
      } catch (err) {
        console.error("Ошибка при доступе к камере:", err);
      }
    }

    let cropper;
    let originalImageDataUrl; // Здесь будет храниться оригинальное фото

    function useStream(stream) {
        const img = document.getElementById("imgPhotoWrapper")
        img.classList.add("hidden")

        const video = document.getElementById("videoPlayerFactory")
        video.classList.remove("hidden")

        video.srcObject = stream;
        video.play();

        const addPhotoButton = document.getElementById("photo-buttonAdd")

        // Добавляем кнопку "Снять фото" вместо старой, которая теперь только запускает камеру
        // Лучше создать отдельную кнопку в разметке, но можно и так:
        if (!document.getElementById('captureBtn')) {
            const captureBtn = document.createElement('button');
            captureBtn.textContent = 'Снять фото';
            captureBtn.className = 'photo-buttonAdd';
            captureBtn.id = 'captureBtn';
            captureBtn.type = 'button';
            captureBtn.onclick = captureAndCrop; // Новая функция

            addPhotoButton.classList.add("hidden")

            document.querySelector('.buttonsForCameraWrapper').appendChild(captureBtn);
        }
    }

    // Функция для захвата кадра и открытия редактора
    function captureAndCrop() {
        const video = document.getElementById("videoPlayerFactory");
        const canvas = document.createElement('canvas');
        const context = canvas.getContext('2d');

        // Устанавливаем размеры canvas как у видео
        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;

        // Рисуем текущий кадр видео на canvas
        context.drawImage(video, 0, 0, canvas.width, canvas.height);

        // Получаем Data URL изображения
        originalImageDataUrl = canvas.toDataURL('image/jpeg');

        // Останавливаем камеру
        stopCamera();

        // Показываем модальное окно для обрезки
        openCropModal(originalImageDataUrl);
    }

    function openCropModal(imageUrl) {
        const modal = document.getElementById('cropModal');
        const img = document.getElementById('cropImage');
        
        modal.style.display = 'flex';
        img.src = imageUrl;

        // Инициализируем Cropper.js после загрузки изображения
        img.onload = function() {
            if (cropper) {
                cropper.destroy(); // Уничтожаем предыдущий экземпляр
            }
            cropper = new Cropper(img, {
                aspectRatio: 1, // Квадратное соотношение (как во многих аватарах)
                viewMode: 1,
                movable: true,
                zoomable: true
            });
        };
    }

    function closeCropModal() {
        const img = document.getElementById("imgPhotoWrapper");
        img.classList.remove("hidden");

        document.getElementById('cropModal').style.display = 'none';
        if (cropper) {
            cropper.destroy();
        }

        stopCamera()
    }

    function crop() {
        if (cropper) {
            // Получаем обрезанное изображение в формате Data URL
            const croppedCanvas = cropper.getCroppedCanvas();
            const croppedImageDataUrl = croppedCanvas.toDataURL('image/jpeg');

            // Обновляем imgPhotoWrapper и скрываем видео
            const img = document.getElementById("imgPhotoWrapper");
            img.src = croppedImageDataUrl;
            img.classList.remove("hidden");

            closeCropModal();
        }
    }

    function stopCamera() {
        const video = document.getElementById("videoPlayerFactory");
        if (video.srcObject) {
            video.srcObject.getTracks().forEach(track => track.stop());
            video.srcObject = null;
        }

        const addPhotoButton = document.getElementById("photo-buttonAdd")

        addPhotoButton.classList.remove("hidden");
        video.classList.add("hidden");
        const captureBtn = document.getElementById('captureBtn');
        if (captureBtn) captureBtn.remove(); // Убираем кнопку "Снять фото"
    }

</script>