@model Portal.Controllers.PersonalityFactoryController.PersonalityFactoryAddModel

<div id="headMenu" class="row" style="margin:0px">
    <div class="col-12" style="display:inline-block">
        <!--блок заголовка-->
        <table class="table-page-menu" style="margin-top: 10px; margin-bottom: 10px">
            <tbody>
                <tr>
                    <!--назад-->
                    <td id="back" style="text-align:left; width:100px; cursor:pointer">
                        <img src="/themes/clearmin/img/md/dark/keyboard-backspace.svg" height="38" width="24" style="cursor:pointer">
                        <label style="margin-left:10px; cursor:pointer">назад</label>
                    </td>
                    <!--заголовок-->
                    <td>
                        <h2 id="header" style="margin:0px; margin-left:5px; margin-right:20px; margin-bottom:6px"></h2>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
</div>

<div class="perosnalityFactoryAdd-wrapper">
    <form class="perosnalityFactoryAdd-form" id="personalityForm" onsubmit="event.preventDefault(); AddFactoryPerson();">

        <div class="stage1-wrapper">

            <label class="label-light">Фамилия</label>
            <input required type="text" class="form-control" placeholder="Введите фамилию" id="surnameFactory" value="">

            <div class="personalityFactory-smallFieldsWrapper">
                <div class="fullwidthFactoryField">
                    <label class="label-light">Имя</label>
                    <input required type="text" class="form-control" placeholder="Введите имя" id="nameFactory" value="">
                </div>

                <div class="fullwidthFactoryField">
                    <label class="label-light">Отчество</label>
                    <input type="text" class="form-control" placeholder="Введите отчество" id="lastnameFactory" value="">
                </div>

            </div>


            <label class="label-light">Дата рождения</label>
            <input required type="date" class="form-control" placeholder="ДД.ММ.ГГГГ" id="dateBirthFactory" value="">

            <div class="personalityFactory-smallFieldsWrapper">
                <div class="fullwidthFactoryField">
                    <label class="label-light">ИНН</label>
                    <input required type="text" class="form-control" maxlength="12" placeholder="Введите ИНН" id="innFactory" value="">
                </div>

                <div class="fullwidthFactoryField">
                    <label class="label-light">СНИЛС</label>
                    <input required type="text" class="form-control" placeholder="Введите СНИЛС" id="factorySnils" value="">
                </div>
            </div>

            <div class="form-group">
                <label class="label-light" style="width:100%">Отдел</label>
                <div style="width:100%; float:left;">
                    <select required id="departmentFactory" class="form-control selectors" data-width="100%">
                        <option></option>
                        @foreach (var item in Model.FactoryDepartments.OrderBy(x => x.Name))
                        {
                            <option value="@item.Id">@item.Name</option>
                        }
                    </select>
                </div>
            </div>

            <div class="form-group">
                <label class="label-light" style="width:100%">Участок</label>
                <div style="width:100%; float:left;">
                    <select required id="workshopFactory" class="form-control selectors" data-width="100%" disabled></select>
                </div>
            </div>

            <div class="form-group">
                <label class="label-light" style="width:100%">Должность</label>
                <div style="width:100%; float:left;">
                    <select required id="positionFactory" class="form-control selectors" data-width="100%" disabled></select>
                </div>
            </div>

        </div>

        <div class="stage2-wrapper">

            <div class="personalityFactory-smallFieldsWrapper">
                <div class="fullwidthFactoryField">

                    <div class="form-group">
                        <label class="label-light" style="width:100%">Тип гражданства</label>
                        <div style="width:100%; float:left;">
                            <select required id="citizenshipTypeFactory" class="form-control selectors" data-width="100%">
                                <option></option>
                                @foreach (var item in Model.FactoryCitizenshipTypes.OrderBy(x => x.Name))
                                {
                                    <option value="@item.Id">@item.Name</option>
                                }
                            </select>
                        </div>
                    </div>

                </div>
                <div class="fullwidthFactoryField">

                    <div class="form-group">
                        <label class="label-light" style="width:100%">Гражданство</label>
                        <div style="width:100%; float:left;">
                            <select required id="citizenshipFactory" class="form-control selectors" data-width="100%" disabled></select>
                        </div>
                    </div>

                </div>
            </div>



            <div class="form-group">
                <label class="label-light" style="width:100%">Юр. лицо</label>
                <div style="width:100%; float:left;">
                    <select required id="legalEntityFactory" class="form-control selectors" data-width="100%">
                        <option></option>
                        @foreach (var item in Model.FactoryEntities.OrderBy(x => x.Name))
                        {
                            <option value="@item.Id">@item.Name</option>
                        }
                    </select>
                </div>
            </div>

            <div class="form-group">
                <label class="label-light" style="width:100%">Тип документа</label>
                <div style="width:100%; float:left;">
                    <select required id="documentTypeFactory" class="form-control selectors" data-width="100%">
                        <option></option>
                        @foreach (var item in Model.FactoryDocumentTypes.OrderBy(x => x.Name))
                        {
                            <option value="@item.Id">@item.Name</option>
                        }
                    </select>
                </div>
            </div>

            <div class="personalityFactory-smallFieldsWrapper">
                <div class="fullwidthFactoryField">
                    <label class="label-light">Номер телефона</label>
                    <input required type="text" class="form-control" maxlength="10" placeholder="9XXXXXXXXX" id="telFactory" value="">
                </div>
                <div class="fullwidthFactoryField">
                    <label class="label-light">Номер банковской карты</label>
                    <input required type="text" class="form-control" placeholder="Введите номер банковской карты" maxlength="16" id="cardFactory" value="">
                </div>
            </div>

            <div class="form-group">
                <label class="label-light" style="width:100%">Банк</label>
                <div style="width:100%; float:left;">
                    <select required id="bankFactory" class="form-control selectors" data-width="100%">
                        <option></option>
                        @foreach (var item in Model.FactoryBanks.OrderBy(x => x.Name))
                        {
                            <option value="@item.Id">@item.Name</option>
                        }
                    </select>
                </div>
            </div>

            <div class="personalityFactory-smallFieldsWrapper">
                <div class="fullwidthFactoryField">
                    <label class="label-light">Дата въезда</label>
                    <input type="date" class="form-control" placeholder="ДД.ММ.ГГГГ" id="entryDateFactory" value="">
                </div>
                <div class="fullwidthFactoryField">
                    <label class="label-light">Дата выезда</label>
                    <input type="date" class="form-control" placeholder="ДД.ММ.ГГГГ" id="exitDateFactory" value="">
                </div>
            </div>

            <div class="personalityFactory-smallFieldsWrapper">
                <div class="fullwidthFactoryField">
                    <label class="label-light">Дата приема на работу</label>
                    <input required type="date" class="form-control" placeholder="ДД.ММ.ГГГГ" id="hireDateFactory" value="">
                </div>
                <div class="fullwidthFactoryField">
                    <label class="label-light">Дата увольнения</label>
                    <input type="date" class="form-control" placeholder="ДД.ММ.ГГГГ" id="dismissalDateFactory" value="">
                </div>
            </div>



        </div>

        <div class="lastStage-wrapper">
            <div class="photo-wrapper">
                <img src="/svg/panels/help.svg" width="90px">

                <button class="photo-buttonAdd" type="button">Добавить фото</button>
            </div>


            <button class="btn btn-success btn-addPersonFactory" type="submit">Добавить сотрудника</button>

        </div>
    </form>
</div>


<script>
    // Объявление переменных со всеми полями
    const surnameFactory = document.getElementById('surnameFactory');
    const nameFactory = document.getElementById('nameFactory');
    const lastnameFactory = document.getElementById('lastnameFactory');
    const dateBirthFactory = document.getElementById('dateBirthFactory');
    const innFactory = document.getElementById('innFactory');
    const factorySnils = document.getElementById('factorySnils');
    const departmentFactory = document.getElementById('departmentFactory');
    const workshopFactory = document.getElementById('workshopFactory');
    const positionFactory = document.getElementById('positionFactory');
    const citizenshipTypeFactory = document.getElementById('citizenshipTypeFactory');
    const citizenshipFactory = document.getElementById('citizenshipFactory');
    const legalEntityFactory = document.getElementById('legalEntityFactory');
    const documentTypeFactory = document.getElementById('documentTypeFactory');
    const telFactory = document.getElementById('telFactory');
    const cardFactory = document.getElementById('cardFactory');
    const bankFactory = document.getElementById('bankFactory');
    const entryDateFactory = document.getElementById('entryDateFactory');
    const exitDateFactory = document.getElementById('exitDateFactory');
    const hireDateFactory = document.getElementById('hireDateFactory');
    const dismissalDateFactory = document.getElementById('dismissalDateFactory');

    $("#PageHeader").text("Учет сотрудников (Завод)")
    $('#back').unbind('click');
    $('#back').click(function () {
        SpinnerShow();
        $('#container-fluid').load(`/PersonalityFactory/PersonalityFactoryTable`, function () {
            SpinnerHide()
        });
    });


    // Валидация СНИЛСА
    factorySnils.addEventListener('input', function(e) {
        // 1. Удаляем все не-цифры (дефисы, пробелы и т.д.)
        let value = e.target.value.replace(/\D/g, '');

        // 2. Добавляем дефисы и пробел
        if (value.length > 3) value = value.slice(0, 3) + '-' + value.slice(3);
        if (value.length > 7) value = value.slice(0, 7) + '-' + value.slice(7);
        if (value.length > 11) value = value.slice(0, 11) + ' ' + value.slice(11);

        // 3. Обрезаем лишнее (если больше 11 цифр)
        e.target.value = value.slice(0, 14); // Максимум 14 символов (XXX-XXX-XXX XX)
    });

    // Проверка на ввод только русских букв
    function checkOnlyRussianTextInput(e) {
        if (/[a-zA-Z0-9.,]/.test(e.target.value)) {
            e.target.value = e.target.value.replace(/[a-zA-Z0-9.,]/g, ''); // Удаляем латиницу
        }
    }

    // Проверка на ввод только цифр
    function checkOnlyNumberInput(e) {
        if (/[а-яА-Яa-zA-Z.,]/.test(e.target.value)) {
            e.target.value = e.target.value.replace(/[а-яА-Яa-zA-Z.,]/g, '');
        }
    }

    // Накидываем нужные обработчики на поля
    innFactory.addEventListener('input', checkOnlyNumberInput);
    factorySnils.addEventListener('input', checkOnlyNumberInput);
    cardFactory.addEventListener('input', checkOnlyNumberInput);
    telFactory.addEventListener('input', checkOnlyNumberInput);
    surnameFactory.addEventListener('input', checkOnlyRussianTextInput);
    nameFactory.addEventListener('input', checkOnlyRussianTextInput);
    lastnameFactory.addEventListener('input', checkOnlyRussianTextInput);

    departmentFactory.addEventListener("change", getWorkshops);
    workshopFactory.addEventListener("change", getJobTitles);
    citizenshipTypeFactory.addEventListener("change", getCitizenship);

    async function getJobTitles() {
        const departmentId = departmentFactory.value;
        const workshopId = workshopFactory.value;

        if(!departmentId)
        {
            return alert("Выберите отдел!")
        }

        if(!workshopId)
        {
            return alert("Выберите участок!")
        }

        try {
            SpinnerShow();
            const req = await fetch("/PersonalityFactory/GetJobTitles?depertment=" + departmentId + "&workshop=" + workshopId)
            const response = await req.json();

            if(!response)
            {
                return alert("Должностей не найдено!")
            }

            positionFactory.innerHTML = "<option></option>"
            positionFactory.disabled = false;

            response.forEach(element => {
                positionFactory.innerHTML += `<option value="${element.id}">${element.name}</option>`
            })
        } catch(e) {
            alert(e)
        } finally {
            SpinnerHide();
        }
    }

    async function getWorkshops() {
        const id = departmentFactory.value;

        if(!id)
        {
            return alert("Выберите отдел!")
        }

        try {
            SpinnerShow();
            const req = await fetch("/PersonalityFactory/GetWorkshops?depertment=" + id)
            const response = await req.json();

            if(!response)
            {
                return alert("Участков не найдено!")
            }

            workshopFactory.innerHTML = "<option></option>"
            workshopFactory.disabled = false;
            positionFactory.disabled = true
            positionFactory.innerHTML = "<option></option>"

            response.forEach(element => {
                workshopFactory.innerHTML += `<option value="${element.id}">${element.name}</option>`
            })
        } catch(e) {
            alert(e)
        } finally {
            SpinnerHide();
        }
    }

    async function getCitizenship() {
        const citizenshipTypeid = citizenshipTypeFactory.value;

        if(!citizenshipTypeid)
        {
            return alert("Выберите тип гражданства!")
        }

        try {
            SpinnerShow();
            const req = await fetch("/PersonalityFactory/GetCitizenship?citizenshipType=" + citizenshipTypeid)
            const response = await req.json();

            if(!response)
            {
                return alert("Ничего не найдено!")
            }

            citizenshipFactory.innerHTML = "<option></option>"
            citizenshipFactory.disabled = false;


            response.forEach(element => {
                citizenshipFactory.innerHTML += `<option value="${element.id}">${element.name}</option>`
            })
        } catch(e) {
            alert(e)
        } finally {
            SpinnerHide();
        }
    }


    async function AddFactoryPerson(e) {

        const person = {
            Surname: surnameFactory.value.trim(),
            Name: nameFactory.value.trim(),
            Patronymic: lastnameFactory.value.trim(),
            Birthdate: dateBirthFactory.value.trim(),
            INN: innFactory.value.trim(),
            SNILS: factorySnils.value.replaceAll("-", "").replaceAll(" ","").trim(),
            FactoryDepartment: parseInt(departmentFactory.value.trim()),
            FactoryWorkshop: parseInt(workshopFactory.value.trim()),
            FactoryJobTitle: parseInt(positionFactory.value.trim()),
            FactoryCitizenship: parseInt(citizenshipFactory.value.trim()),
            FactoryEntity: parseInt(legalEntityFactory.value.trim()),
            FactoryDocumentType: parseInt(documentTypeFactory.value.trim()),
            Phone: telFactory.value.trim(),
            CardNumber: cardFactory.value.trim(),
            FactoryBanks: parseInt(bankFactory.value.trim()),
            HostelChekin: entryDateFactory.value.trim() || null,
            HostelCheckOut: exitDateFactory.value.trim() || null,
            HiringDate: hireDateFactory.value.trim(),
            DismissedDate: dismissalDateFactory.value.trim() || null
        };

        SpinnerShow();

        $.ajax({
            type: "POST",
            url: '/PersonalityFactory/SaveNewPerson',
            contentType: "application/json",
            data: JSON.stringify(person),
            success: function (result) {
                SpinnerHide();
                $('#container-fluid').load(`/PersonalityFactory/PersonalityFactoryTable`)
            },
            error: function (error) {
                SpinnerHide();
                alert(error.responseText);
            }
        });
    }

</script>

<style>
    .perosnalityFactoryAdd-wrapper {
        background: white;
        width: 100%;
        padding: 30px;
        height: fit-content;
        border: 1px solid #CCC;
        border-radius: 2px;
    }

    .photo-wrapper {
        border: 1px solid #CCC;
        border-radius: 2px;
        width: 100%;
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: space-evenly;
        background-color: #f7f7f7;
        flex-direction: column;
    }

    .perosnalityFactoryAdd-form {
        width: 100%;
        height: 100%;
        display: flex;
        flex-direction: row;
        align-items: start;
        justify-content: space-between;
        gap: 30px;
    }

    .perosnalityFactoryAdd-form > div {
        height: 100%;
        gap: 3px;
    }

    .stage1-wrapper, .stage2-wrapper {
        width: 35%;
        display: flex;
        flex-direction: column;
    }

    .stage1-wrapper > label, .stage2-wrapper > label {
        margin-bottom: 2px;
        padding-left: 0
    }

    .stage1-wrapper input, .stage2-wrapper input {
        height: 38px;
    }

    .stage1-wrapper select, .stage2-wrapper select {
        height: 38px;
    }

    .stage1-wrapper > .form-group, .stage2-wrapper > .form-group {
         margin-bottom: 0px;
    }

    .stage2-wrapper {
        padding-left: 0px;
    }

    .lastStage-wrapper {
        width: 30%;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        align-items: center;
        padding-top: 22px;
    }

    .perosnalityFactoryAdd-form > .lastStage-wrapper {
        height: -webkit-fill-available;
        gap: 32px;
    }

    .photo-buttonAdd {
        margin-top: 15px;
        background-color: white;
        border: 1px solid #CCC;
        font-family: 'Akrobat-regular';
        font-size: 16px;
        padding: 5px 20px;
        border-radius: 2px;
        transition: all 0.15s linear;
    }

    .photo-buttonAdd:hover {
        background-color: #e8e8e8;
        border-color: #a8a8a8;
    }

    .personalityFactory-smallFieldsWrapper {
        display: flex;
        gap: 20px;
        justify-content: space-between;
    }

    .fullwidthFactoryField {
        width: 100%;
    }

    .btn-addPersonFactory {
        font-family: 'Akrobat-Regular';
        font-size: 12px;
    }

</style>